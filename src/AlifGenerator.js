function إنشاء_الشفرة(ast, مستوى = 0, عداد = { قيمة: 0 }, داخل_برنامج = false) {
    const مولدات = {
        برنامج: (عقدة) => {
            const كود = عقدة.جمل
                .map((ج) => إنشاء_الشفرة(ج, مستوى, عداد, true))
                .join("\n");
            return (
                `const __fragment = document.createDocumentFragment();\n` +
                `${كود}\n` +
                `document.body.appendChild(__fragment);`
            );
        },

        متغير: (عقدة) => {
            const الاسم = عقدة.اسم;
            const القيمة = إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد);
            // تتبع المتغيرات المعلنة لتجنّب إعادة let
            if (!عداد.declaredVars) عداد.declaredVars = new Set();
            if (عداد.declaredVars.has(الاسم)) {
                return `${الاسم} = ${القيمة};`;
            } else {
                عداد.declaredVars.add(الاسم);
                return `let ${الاسم} = ${القيمة};`;
            }
        },

        اطبع: (عقدة) => `console.log(${إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد)});`,
        ادخل: (عقدة) => `prompt(${إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد)})`,
        طول: (عقدة) =>
            `Object.keys(${إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد)}).length`,
        اقصى: (عقدة) => `Math.max(...${إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد)})`,
        ادنى: (عقدة) => `Math.min(...${إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد)})`,
        اشعار: (عقدة) => `alert(${إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد)});`,
        صحيح: (عقدة) => `parseInt(${إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد)})`,
        عشري: (عقدة) => `parseFloat(${إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد)})`,
        مصفوفة: (عقدة) => `JSON.parse(${إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد)})`,

        اضف: (عقدة) => {
            if (!عقدة?.المتغير || !عقدة?.قيمة) {
                console.error("خطأ: المتغير أو القيمة غير معرّفة");
                return "// خطأ: المتغير أو القيمة غير معرّفة";
            }
            return `${إنشاء_الشفرة(
                عقدة.المتغير,
                مستوى,
                عداد
            )}.push(${إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد)});`;
        },
        امسح: (عقدة) => {
            if (!عقدة?.المتغير || !عقدة?.قيمة) {
                console.error("خطأ: المتغير أو القيمة غير معرّفة");
                return "// خطأ: المتغير أو القيمة غير معرّفة";
            }
            return `const index = ${إنشاء_الشفرة(
                عقدة.المتغير,
                مستوى,
                عداد
            )}.indexOf(${إنشاء_الشفرة(
                عقدة.قيمة,
                مستوى,
                عداد
            )});if (index > -1) {${إنشاء_الشفرة(
                عقدة.المتغير,
                مستوى,
                عداد
            )}.splice(index, 1);}`;
        },
        ادرج: (عقدة) => {
            if (!عقدة?.المتغير || !عقدة?.موقع || !عقدة?.قيمة) {
                console.error("خطأ: المتغير أو الموقع أو القيمة غير معرّفة");
                return "// خطأ: المتغير أو الموقع أو القيمة غير معرّفة";
            }
            return `${إنشاء_الشفرة(
                عقدة.المتغير,
                مستوى,
                عداد
            )}.splice(${إنشاء_الشفرة(
                عقدة.موقع,
                مستوى,
                عداد
            )}, 0, ${إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد)});`;
        },
        مفاتيح: (عقدة) => {
            if (!عقدة?.المتغير || !عقدة?.قيمة) {
                console.error("خطأ: المتغير أو القيمة غير معرّفة");
                return "// خطأ: المتغير أو القيمة غير معرّفة";
            }
            return `Object.keys(${إنشاء_الشفرة(عقدة.المتغير, مستوى, عداد)})`;
        },

        ارجع: (عقدة) => `return ${إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد)};`,
        استورد: (عقدة) => `import "${إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد)}";`,
        عام: () => ``,
        استمر: () => `continue;`,
        توقف: () => `break;`,
        صح: () => `true`,
        خطأ: () => `false`,
        عدم: () => `null`,

        لاجل: (عقدة) => {
            const المتغير = عقدة.المتغير;
            const الحد = إنشاء_الشفرة(عقدة.الحد, 0, عداد);
            const القيم = عقدة.القيم
                .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
                .join("\n");
            return `for (let ${المتغير.اسم} = 0; ${المتغير.اسم} < ${الحد}; ${المتغير.اسم}++) {\n\t${القيم}\n}`;
        },
        بينما: (عقدة) => {
            const الشروط = عقدة.الشروط
                .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
                .join("\n");
            const القيم = عقدة.القيم
                .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
                .join("\n");
            return `while (${الشروط}) {\n\t${القيم}\n}`;
        },
        دالة: (عقدة) => {
            const اسم = عقدة.اسم;
            const معاملات = (عقدة.معاملات || []).join(", ");
            const جسم = عقدة.جسم
                .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
                .join("\n");
            return `function ${اسم}(${معاملات}) {\n${جسم}\n}`;
        },
        اذا: (عقدة) => {
            const شرط = إنشاء_الشفرة(عقدة.شرط, 0, عداد);
            const جسم = عقدة.جسم
                .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
                .join("\n");
            return `if (${شرط}) {\n${جسم}\n}`;
        },

        قيمة: (عقدة) => {
            const v = عقدة.قيمة;
            if (typeof v === "boolean") return v ? "صح" : "خطا";
            if (v === null) return "عدم";
            if (!isNaN(v)) return v;
            return v;
        },
        معرف: (عقدة) => `${عقدة.اسم}`,
        عملية: (عقدة) => {
            const يسار = إنشاء_الشفرة(عقدة.يسار, 0, عداد);
            const يمين = إنشاء_الشفرة(عقدة.يمين, 0, عداد);
            const عامل = عقدة.عامل;
            return `(${يسار} ${عامل} ${يمين})`;
        },
        تعابيرات: (عقدة) => {
            const list = عقدة.قيم
                .map((v) => إنشاء_الشفرة(v, 0, عداد))
                .join(", ");
            return `[${list}]`;
        },
        كائن: (عقدة) => {
            const props = عقدة.خصائص
                .map(
                    ({ المفتاح, القيمة }) =>
                        `"${المفتاح}": ${إنشاء_الشفرة(القيمة, 0, عداد)}`
                )
                .join(", ");
            return `{${props}}`;
        },
        قائمة: (عقدة) => {
            const قيم = عقدة.قيم
                .map((القيمة) => `${إنشاء_الشفرة(القيمة, 0, عداد)}`)
                .join(", ");
            return `[${قيم}]`;
        },
        قائمة_اقواس: (عقدة) => {
            const قيم = عقدة.قيم
                .map((القيمة) => `${إنشاء_الشفرة(القيمة, 0, عداد)}`)
                .join(", ");
            return `(${قيم})`;
        },

        // html
        نص: (عقدة) => {
            عداد.قيمة++;
            const قيم = عقدة.قيم.map(({ القيمة }) =>
                إنشاء_الشفرة(القيمة, 0, عداد)
            );
            const اسم = `عنصر${عداد.قيمة}`;
            const سطر1 = `const ${اسم} = document.createElement("p");`;
            const سطر2 = `${اسم}.innerHTML = ${قيم[0]};`;
            const سطر3 = `${اسم}.style = ${قيم[1]};`;
            const سطر4 = `__fragment.appendChild(${اسم});`;
            return [سطر1, سطر2, سطر3, سطر4].join("\n\t");
        },
        رابط: (عقدة) => {
            عداد.قيمة++;
            const قيم = عقدة.قيم.map(({ القيمة }) =>
                إنشاء_الشفرة(القيمة, 0, عداد)
            );
            const اسم = `عنصر${عداد.قيمة}`;
            const سطر1 = `const ${اسم} = document.createElement("a");`;
            const سطر2 = `${اسم}.innerHTML = ${قيم[0]};`;
            const سطر3 = `${اسم}.href = ${قيم[1]};`;
            const سطر4 = `${اسم}.style = ${قيم[2]};`;
            const سطر5 = `__fragment.appendChild(${اسم});`;
            return [سطر1, سطر2, سطر3, سطر4, سطر5].join("\n\t");
        },
    };

    const مولد = مولدات[ast.نوع];
    if (!مولد) {
        console.error("نوع غير مدعوم: " + ast.نوع);
        return `// خطأ: نوع غير مدعوم (${ast.نوع})`;
    }
    const خطوط = مولد(ast).split("\n");
    return خطوط.map((خط) => `${خط}`).join("\n");
}

module.exports = { إنشاء_الشفرة };
