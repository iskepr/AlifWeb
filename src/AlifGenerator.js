import { منشئ_عام_للاقواس } from "./Core/Statements/AlifGeneral.js";
import { منشئ_متغير, منشئ_متغير_مجمع } from "./Core/Statements/AlifVariable.js";
import { منشئ_لاجل } from "./Core/Statements/AlifFor.js";
import { منشئ_بينما } from "./Core/Statements/AlifWhile.js";
import {
    منشئ_استدعاء_دالة,
    منشئ_دالة,
} from "./Core/Statements/AlifFunction.js";
import { منشئ_اذا, منشئ_اواذا, منشئ_والا } from "./Core/Statements/AlifIF.js";
import { منشئ_عمليات } from "./Core/Statements/AlifOperations.js";
import { منشئ_عام_الواجهة } from "./Core/Statements/AlifUI.js";
import { منشئ_الوقت } from "./Core/Libraries/AlifTime.js";
import { منشئ_الرياضيات } from "./Core/Libraries/AlifMath.js";
import { منشئ_حاول, منشئ_خلل, منشئ_نهاية } from "./Core/Statements/AlifTry.js";
import { منشئ_صنف } from "./Core/Statements/AlifClass.js";
import { منشئ_استورد } from "./Core/Statements/AlifImport.js";
import { منشئ_اشعار } from "./Core/Libraries/AlifSystem.js";
import { منشئ_الفهرس } from "./Core/Statements/AlifObject.js";
import { منشئ_قائمة } from "./Core/Statements/AlifList.js";
import { منشئ_مترابطة } from "./Core/Statements/AlifTuple.js";

export function إنشاء_الشفرة(
    ast,
    مستوى = 0,
    عداد = { قيمة: 0 },
    داخل_برنامج = false
) {
    const مولدات = {
        برنامج: (عقدة) => {
            const كود = عقدة.جمل
                .map((ج) => إنشاء_الشفرة(ج, مستوى, عداد, true))
                .join("\n");
            return `
            function مدى(البداية, النهاية, خطوة = 1) {
                let الناتج = [];
                if (خطوة > 0) {
                    for (let i = البداية; i < النهاية; i += خطوة) {
                        الناتج.push(i);
                    }
                } else {
                    for (let i = البداية; i > النهاية; i += خطوة) {
                        الناتج.push(i);
                    }
                }
                return الناتج;
            }
            async function AlifApp() {
            ${كود}
            }
            AlifApp();`;
        },

        متغير: (عقدة) => منشئ_متغير(مستوى, عداد, عقدة),
        متغير_مجمع: (عقدة) => منشئ_متغير_مجمع(مستوى, عداد, عقدة),

        اطبع: (عقدة) => منشئ_عام_للاقواس(مستوى, عقدة, "console.log"),
        ادخل: (عقدة) => منشئ_عام_للاقواس(مستوى, عقدة, "prompt"),
        طول: (عقدة) =>
            منشئ_عام_للاقواس(مستوى, عقدة, "Object.keys", {
                اضافة: ".length",
            }),
        اقصى: (عقدة) =>
            منشئ_عام_للاقواس(مستوى, عقدة, "Math.max", {
                عداد_مصوفة: true,
            }),
        ادنى: (عقدة) =>
            منشئ_عام_للاقواس(مستوى, عقدة, "Math.min", {
                عداد_مصوفة: true,
            }),
        صحيح: (عقدة) => منشئ_عام_للاقواس(مستوى, عقدة, "parseInt"),
        مصفوفة: (عقدة) =>
            منشئ_عام_للاقواس(مستوى, عقدة, "JSON.parse", {
                هل_مصفوفة: true,
            }),
        عشري: (عقدة) => {
            const vals = عقدة.قيم.map((v) => إنشاء_الشفرة(v, مستوى, عداد));
            let القيمة;
            if (vals[0] == '"لانهائي"') {
                القيمة = "Infinity";
            } else if (vals[0] == '"-لانهائي"') {
                القيمة = "-Infinity";
            } else {
                القيمة = vals.join(", ");
            }
            return `parseFloat(${القيمة})`;
        },

        // جلب: (عقدة) => {
        //     const القيم = عقدة.قيم.map((v) => إنشاء_الشفرة(v, مستوى, عداد));
        //     if (القيم[0] == "\"جسون\"") {
        //         return `getData();
        //         async function getData() {
        //             try {
        //                 const response = await fetch(القيم[1]);  // استدعاء الـ API
        //                 const data = await response.json(); // تحويل الاستجابة إلى JSON
        //                 return data; // إرجاع البيانات
        //             } catch (error) {
        //                 console.error(error);
        //             }
        //         }`;
        //     } else {
        //         return `fetch(${القيم[1]})`;
        //     }
        // },

        اضف: (عقدة) => {
            const قيم = عقدة.قيم
                .map((القيمة) => `${إنشاء_الشفرة(القيمة, 0, عداد)}`)
                .join(", ");
            return `${عقدة.المتغير}.push(${قيم});`;
        },
        امسح: (عقدة) => {
            const قيم = عقدة.قيم
                .map((القيمة) => `${إنشاء_الشفرة(القيمة, 0, عداد)}`)
                .join(", ");
            return `const index = ${عقدة.المتغير}.indexOf(${قيم});if (index > -1) {${عقدة.المتغير}.splice(index, 1);}`;
        },
        ادرج: (عقدة) => {
            const قيم = عقدة.قيم.map((القيمة) => إنشاء_الشفرة(القيمة, 0, عداد));
            return `${عقدة.المتغير}.splice(${قيم[0]}, 0, ${قيم[1]});`;
        },
        مفاتيح: (عقدة) => {
            return `Object.keys(${عقدة.المتغير})`;
        },
        قيم: (عقدة) => {
            return `Object.values(${عقدة.المتغير})`;
        },
        رتب: (عقدة) => {
            return `${عقدة.المتغير}.sort((a, b) => a - b)`;
        },

        ارجع: (عقدة) => {
            const قيم = عقدة.قيم.map((القيمة) => إنشاء_الشفرة(القيمة, 0, عداد));
            if (قيم.length === 1) {
                return `return ${قيم[0]};`;
            } else {
                return `return [${قيم.join(", ")}];`;
            }
        },
        استورد: (عقدة) => منشئ_استورد(عقدة, مستوى, عداد),
        احذف: (عقدة) => `${إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد)} = undefined;`,
        عام: () => ``,
        استمر: () => `continue;`,
        توقف: () => `break;`,
        صح: () => `true`,
        خطأ: () => `false`,
        خطا: () => `false`,
        عدم: () => `null`,

        لاجل: (عقدة) => منشئ_لاجل(مستوى, عداد, عقدة, داخل_برنامج),
        بينما: (عقدة) => منشئ_بينما(مستوى, عداد, عقدة, داخل_برنامج),
        دالة: (عقدة) => منشئ_دالة(مستوى, عداد, عقدة, داخل_برنامج),
        استدعاء_دالة: (عقدة) => منشئ_استدعاء_دالة(مستوى, عداد, عقدة),

        حاول: (عقدة) => منشئ_حاول(مستوى, عداد, عقدة, داخل_برنامج),
        خلل: (عقدة) => منشئ_خلل(مستوى, عداد, عقدة, داخل_برنامج),
        نهاية: (عقدة) => منشئ_نهاية(مستوى, عداد, عقدة, داخل_برنامج),

        اذا: (عقدة) => منشئ_اذا(مستوى, عداد, عقدة, داخل_برنامج),
        إذا: (عقدة) => منشئ_اذا(مستوى, عداد, عقدة, داخل_برنامج),
        اوإذا: (عقدة) => منشئ_اواذا(مستوى, عداد, عقدة, داخل_برنامج),
        اواذا: (عقدة) => منشئ_اواذا(مستوى, عداد, عقدة, داخل_برنامج),
        والا: (عقدة) => منشئ_والا(مستوى, عداد, عقدة, داخل_برنامج),
        وإلا: (عقدة) => منشئ_والا(مستوى, عداد, عقدة, داخل_برنامج),
        تعبير_شرطي: (عقدة) => {
            return `(${إنشاء_الشفرة(عقدة.الشرط, مستوى, عداد)} ? ${إنشاء_الشفرة(
                عقدة.قيمة_اولى,
                مستوى,
                عداد
            )} : ${إنشاء_الشفرة(عقدة.قيمة_ثانية, مستوى, عداد)})`;
        },

        صنف: (عقدة) => منشئ_صنف(مستوى, عداد, عقدة, داخل_برنامج),
        معرف_صنف: (عقدة) =>
            `${عقدة.أسماء_صنف[0]}.${إنشاء_الشفرة(
                عقدة.أسماء_صنف[1],
                مستوى,
                عداد
            )}`,
        اصل: (عقدة) =>
            `super(${عقدة.معاملات
                .map((قيمة) => إنشاء_الشفرة(قيمة, مستوى))
                .join(", ")})`,

        // المكتبات
        الوقت: (عقدة) => منشئ_الوقت(مستوى, عداد, عقدة),
        الرياضيات: (عقدة) => منشئ_الرياضيات(مستوى, عداد, عقدة),

        اشعار: (عقدة) => منشئ_اشعار(عقدة),

        عملية: (عقدة) => منشئ_عمليات(عقدة, مستوى, عداد),
        معرف: (عقدة) => `${عقدة.اسم}`,
        فهرس: (عقدة) => منشئ_الفهرس(عقدة, عداد),
        قائمة: (عقدة) => منشئ_قائمة(عقدة, عداد),
        مترابطة: (عقدة) => منشئ_مترابطة(عقدة, عداد),
        قيمة: (عقدة) => {
            const v = عقدة.قيمة;
            if (typeof v === "boolean") return v ? "صح" : "خطا";
            if (v === null) return "عدم";
            if (!isNaN(v)) return v;
            return v;
        },
        // دعم الفهرس المربع مثلا: مصفوفة[س]
        فهرس_عنصر: (عقدة) => {
            const list = إنشاء_الشفرة(عقدة.list, 0, عداد);
            const index = إنشاء_الشفرة(عقدة.index, 0, عداد);
            return `${list}[${index}]`;
        },

        // الواجهة
        صفحة: (عقدة) =>
            منشئ_عام_الواجهة(
                عقدة,
                عداد,
                "div",
                "height: 100vh; direction: rtl;"
            ),

        نص: (عقدة) => منشئ_عام_الواجهة(عقدة, عداد, "p"),
        رابط: (عقدة) => منشئ_عام_الواجهة(عقدة, عداد, "a"),

        عمودي: (عقدة) =>
            منشئ_عام_الواجهة(
                عقدة,
                عداد,
                "div",
                "display:flex; flex-direction:column;"
            ),
        رأسي: (عقدة) =>
            منشئ_عام_الواجهة(
                عقدة,
                عداد,
                "div",
                "display:flex; flex-direction:row;"
            ),
        توسيط: (عقدة) =>
            منشئ_عام_الواجهة(
                عقدة,
                عداد,
                "div",
                "display:flex; align-items: center; justify-content: center;"
            ),
        بطاقة: (عقدة) =>
            منشئ_عام_الواجهة(
                عقدة,
                عداد,
                "div",
                "margin: 10px; padding: 10px; border-radius: 10px; backdrop-filter: blur(6px); -webkit-backdrop-filter: blur(6px); background-color: #ffffff05;"
            ),
    };

    // التعامل مع المسافات و الاسطر الفارغة
    if (ast.نوع === "غير_معروف" && ast.رمز) {
        if (ast.رمز.النوع === "سطر_جديد") return "\n";
        if (ast.رمز.النوع === "مسافة") return " ";
    }

    const مولد = مولدات[ast.نوع];
    if (!مولد) {
        const error = new Error(
            `المنشئ: "${ast.رمز?.القيمة || ast.النوع}" غير معروف`
        );
        error.line = `في السطر ` + (ast.رمز?.السطر || "غير معروف");
        throw error;
    }
    const خطوط = مولد(ast).split("\n");
    return خطوط.map((خط) => `${خط}`).join("\n");
}
