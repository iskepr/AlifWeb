import { إنشاء_الشفرة } from "../../AlifGenerator.js";
import { محلل_التعبير } from "../Expressions.js";
import { تحقق, تطابق, التالي } from "../TokenUtils.js";

export function محلل_الوقت(الرموز) {
    if (!الرموز || !Array.isArray(الرموز)) {
        throw new Error('الرموز غير معرفة أو غير صحيحة "محلل_الوقت" ' + الرموز);
    }

    let الامر = null;

    تطابق(الرموز, "كلمة", "الوقت");
    تطابق(الرموز, "نقطة");

    if (تطابق(الرموز, "كلمة", "الوقت")) الامر = "الوقت";
    const اوامر = [
        "اليوم",
        "الشهر",
        "السنة",
        "الساعة",
        "الدقيقة",
        "الثانية",
        "غفوة",
    ];
    for (const امر_محتمل of اوامر) {
        if (تطابق(الرموز, "معرف", امر_محتمل)) {
            الامر = امر_محتمل;
            break;
        }
    }

    تطابق(الرموز, "اقواس", "(");

    let قيم = [];
    while (!تحقق(الرموز, "اقواس", ")")) {
        const قيمة = محلل_التعبير(الرموز);
        if (!قيمة) break;
        قيم.push(قيمة);

        // تخطي المسافات والاسطر الفارغة
        while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
            التالي(الرموز);

        if (تحقق(الرموز, "فاصلة")) التالي(الرموز);
    }
    if (!تطابق(الرموز, "اقواس", ")")) رمي_خطأ(`لم يتم اغلاق القوس ")"`, الرموز);
    return { نوع: "الوقت", الامر, قيم };
}

export function منشئ_الوقت(مستوى, عداد, عقدة) {
    const الامر = عقدة.الامر;
    const قيم = عقدة.قيم
        .map((v) => إنشاء_الشفرة(v, مستوى, عداد))
        .filter((v) => v !== "0");
    let قيمة = قيم.join(", ");

    const تحويلات = {
        الوقت: (v) => `new Date(${v}).getTime() / 1000`,
        اليوم: (v) => `new Date(${v}).getDate()`,
        الشهر: (v) => `new Date(${v}).getMonth()`,
        السنة: (v) => `new Date(${v}).getFullYear()`,
        الساعة: (v) => `new Date(${v}).getHours()`,
        الدقيقة: (v) => `new Date(${v}).getMinutes()`,
        الثانية: (v) => `new Date(${v}).getSeconds()`,
        غفوة: (v) =>
            `await new Promise(resolve => setTimeout(resolve, ${v} * 1000))`,
    };

    if (تحويلات[الامر]) return تحويلات[الامر](قيمة);
}
