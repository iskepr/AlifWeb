import { إنشاء_الشفرة } from "../../AlifGenerator.js";
import { محلل_التعبير } from "../Expressions.js";
import { تحقق, تطابق } from "../TokenUtils.js";

export function محلل_الوقت(الرموز) {
    if (!الرموز || !Array.isArray(الرموز)) {
        throw new Error('الرموز غير معرفة أو غير صحيحة "محلل_الوقت" ' + الرموز);
    }

    let الامر = null;

    تطابق(الرموز, "كلمة", "الوقت");
    تطابق(الرموز, "نقطة");

    if (تطابق(الرموز, "كلمة", "الوقت")) {
        الامر = "الوقت";
    }

    if (تطابق(الرموز, "معرف", "اليوم")) {
        الامر = "اليوم";
    }
    if (تطابق(الرموز, "معرف", "الشهر")) {
        الامر = "الشهر";
    }
    if (تطابق(الرموز, "معرف", "السنة")) {
        الامر = "السنة";
    }

    if (تطابق(الرموز, "معرف", "الساعة")) {
        الامر = "الساعة";
    }
    if (تطابق(الرموز, "معرف", "الدقيقة")) {
        الامر = "الدقيقة";
    }
    if (تطابق(الرموز, "معرف", "الثانية")) {
        الامر = "الثانية";
    }

    if (تطابق(الرموز, "معرف", "غفوة")) {
        الامر = "غفوة";
    }

    تطابق(الرموز, "اقواس", "(");

    let قيم = [];
    while (!تحقق(الرموز, "اقواس", ")")) {
        // اضف القيمة
        const قيمة = محلل_التعبير(الرموز);
        if (!قيمة) break; // توقف إذا لم نحصل على قيمة صالحة
        قيم.push(قيمة);

        // تخطي المسافات والاسطر الفارغة
        while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
            التالي(الرموز);

        // اذا لا يوجد فاصلة توقف
        if (تحقق(الرموز, "فاصلة")) التالي(الرموز);
    }
    تطابق(الرموز, "اقواس", ")");

    return { نوع: "الوقت", الامر, قيم };
}

export function منشئ_الوقت(مستوى, عداد, عقدة) {
    const الامر = عقدة.الامر;
    const قيم = عقدة.قيم
        .map((v) => إنشاء_الشفرة(v, مستوى, عداد))
        .filter((v) => v !== "0");
    let قيمة = قيم.join(", ");

    if (الامر === "الوقت") {
        return `new Date(${قيمة}).getTime() / 1000`;
    }

    if (الامر === "اليوم") {
        return `new Date(${قيمة}).getDate()`;
    }
    if (الامر === "الشهر") {
        return `new Date(${قيمة}).getMonth()`;
    }
    if (الامر === "السنة") {
        return `new Date(${قيمة}).getFullYear()`;
    }

    if (الامر === "الساعة") {
        return `new Date(${قيمة}).getHours()`;
    }
    if (الامر === "الدقيقة") {
        return `new Date(${قيمة}).getMinutes()`;
    }
    if (الامر === "الثانية") {
        return `new Date(${قيمة}).getSeconds()`;
    }
    if (الامر === "غفوة") {
        return `await new Promise(resolve => setTimeout(resolve, ${قيمة} * 1000))`;
    }
}
