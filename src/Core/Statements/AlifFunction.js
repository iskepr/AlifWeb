import { احصل, التالي, تحقق, تطابق } from "../TokenUtils.js";
import { إدارة_المسافة_البادئة } from "../Indentation.js";
import { إنشاء_الشفرة } from "../../AlifGenerator.js";
import { محلل_الجملة } from "../../AlifParser.js";
import { رمي_خطأ } from "../AlifErrors.js";
import { محلل_التعبير } from "../Expressions.js";

export let ذاكرة_الدوال = {};

export function محلل_دالة(الرموز) {
    تطابق(الرموز, "كلمة", "دالة");

    let اسم;

    if (تحقق(الرموز, "كلمة", "_تهيئة_")) {
        اسم = تطابق(الرموز, "كلمة", "_تهيئة_");
    } else {
        اسم = تطابق(الرموز, "معرف");
    }
    if (!اسم) رمي_خطأ("لا يوجد اسم للدالة", الرموز);

    ذاكرة_الدوال[اسم.القيمة] = {
        معاملات: [],
    };

    تطابق(الرموز, "اقواس", "(");
    const معاملات = [];
    while (!تحقق(الرموز, "اقواس", ")")) {
        if (تحقق(الرموز, "معرف")) {
            const اسم_المعرف = احصل(الرموز).القيمة;
            التالي(الرموز);

            if (تحقق(الرموز, "علامة_إسناد")) {
                التالي(الرموز);
                const قيمة = محلل_الجملة(الرموز);
                if (قيمة) {
                    معاملات.push({ اسم: اسم_المعرف, قيمة: قيمة.رمز.القيمة });
                }
            } else {
                معاملات.push({ قيمة: اسم_المعرف });
            }
        } else {
            const قيمة = محلل_الجملة(الرموز);
            if (قيمة) معاملات.push({ قيمة: قيمة.القيمة });
        }
        if (تحقق(الرموز, "فاصلة")) التالي(الرموز);
    }
    if (!تطابق(الرموز, "اقواس", ")"))
        رمي_خطأ(`لم يتم اغلاق القوس ")" بعد معاملات الدالة`, الرموز);

    ذاكرة_الدوال[اسم.القيمة].معاملات = معاملات.map((م) =>
        م.اسم ? م.اسم : م.قيمة
    );

    if (!تطابق(الرموز, "نقطتان")) رمي_خطأ(`توقعت ":" بعد تعريف الدالة`, الرموز);

    const اوامر = إدارة_المسافة_البادئة(الرموز, "دالة");
    if (!تحقق(الرموز, "مسافة")) {
        return { نوع: "دالة", اسم: اسم.القيمة, معاملات, اوامر };
    }
    return {
        نوع: "دالة",
        اسم: اسم.القيمة,
        معاملات,
        اوامر,
    };
}

export function منشئ_دالة(مستوى, عداد, عقدة, داخل_برنامج) {
    const اسم = عقدة.اسم;
    const معاملات = Array.isArray(عقدة.معاملات)
        ? عقدة.معاملات
              .map((م) => {
                  if (م.اسم) {
                      return `${م.اسم} = ${م.قيمة}`;
                  }
                  return م.قيمة;
              })
              .join(", ")
        : "خطأ";
    const اوامر = عقدة.اوامر
        .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
        .join("\n");

    // الدوال داخل صنف
    if (اسم === "_تهيئة_") return `constructor (${معاملات}) {\n${اوامر}\n}`;

    return `function ${اسم}(${معاملات}) {\n${اوامر}\n}`;
}

export function محلل_إستدعاء_دالة(الرموز) {
    const اسم = تطابق(الرموز, "معرف").القيمة;
    if (!ذاكرة_الدوال[اسم])
        رمي_خطأ(`الدالة "${اسم}" غير موجودة`, الرموز);

    تطابق(الرموز, "اقواس", "(");

    let معاملات = [];
    while (!تحقق(الرموز, "اقواس", ")")) {
        // اضف القيمة
        const قيمة = محلل_التعبير(الرموز);
        if (!قيمة) break;
        معاملات.push(قيمة);

        // تخطي المسافات والاسطر الفارغة
        while (تحقق(الرموز, "مسافة")) التالي(الرموز);

        // اذا لا يوجد فاصلة توقف
        if (تحقق(الرموز, "فاصلة")) التالي(الرموز);
    }
    if (!تطابق(الرموز, "اقواس", ")"))
        رمي_خطأ(`لم يتم اغلاق القوس ")" بعد معاملات إستدعاء الدالة`, الرموز);
    return {
        نوع: "استدعاء_دالة",
        اسم,
        معاملات,
    };
}

export function منشئ_استدعاء_دالة(مستوى, عداد, عقدة) {
    const اسم = عقدة.اسم;
    const معاملات = عقدة.معاملات.map((م) => إنشاء_الشفرة(م, مستوى, عداد));
    const قيمة = معاملات.join(", ");

    return `${اسم}(${قيمة})`;
}
