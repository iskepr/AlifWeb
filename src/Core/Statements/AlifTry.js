import { التالي, السابق, المؤشر, تحقق, تطابق } from "../TokenUtils.js";
import { إدارة_المسافة_البادئة } from "../Indentation.js";
import { إنشاء_الشفرة } from "../../AlifGenerator.js";
import { محلل_التعبير } from "../Expressions.js";

export function محلل_حاول(الرموز, الدالة_الام) {
    تطابق(الرموز, "كلمة", "حاول");
    تطابق(الرموز, "نقطتان");
    let اوامر_حاول;
    اوامر_حاول = إدارة_المسافة_البادئة(الرموز, الدالة_الام, "حاول");
    if (!تحقق(الرموز, "مسافة")) return { نوع: "حاول", اوامر_حاول };

    return { نوع: "حاول", اوامر_حاول };
}
export function محلل_خلل(الرموز, الدالة_الام) {
    تطابق(الرموز, "كلمة", "خلل");
    let المتغير;
    if (تحقق(الرموز, "معرف")) {
        المتغير = محلل_التعبير(الرموز);
        التالي(الرموز);
    }

    تطابق(الرموز, "نقطتان");

    let اوامر_خلل = إدارة_المسافة_البادئة(الرموز, الدالة_الام, "خلل");
    if (!تحقق(الرموز, "مسافة")) {
        return { نوع: "خلل", اوامر_خلل };
    }

    return { نوع: "خلل", اوامر_خلل, المتغير };
}
export function محلل_نهاية(الرموز, الدالة_الام) {
    تطابق(الرموز, "كلمة", "نهاية");
    تطابق(الرموز, "نقطتان");

    let اوامر_نهاية = إدارة_المسافة_البادئة(الرموز, الدالة_الام, "نهاية");
    if (!تحقق(الرموز, "مسافة")) {
        return { نوع: "نهاية", اوامر_نهاية };
    }

    return { نوع: "نهاية", اوامر_نهاية };
}

export function منشئ_حاول(مستوى, عداد, عقدة, داخل_برنامج) {
    let الشفرة_كاملة = "";

    if (عقدة.اوامر_حاول && عقدة.اوامر_حاول.length > 0) {
        const اوامر_حاول = عقدة.اوامر_حاول;
        const القيم = اوامر_حاول
            .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
            .join("\n");

        الشفرة_كاملة += `try {\n${القيم}\n}`;
    } else {
        الشفرة_كاملة += `try {\n${عقدة.خطأ}\n}`;
    }

    if (عقدة.اوامر_خلل && عقدة.اوامر_خلل.length > 0) {
        const اوامر_خلل = عقدة.اوامر_خلل;

        const القيم = اوامر_خلل
            .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
            .join("\n");

        if (عقدة.المتغير)
            الشفرة_كاملة += `catch (${عقدة.المتغير}) {\n${القيم}\n}`;
        else الشفرة_كاملة += `catch {\n${القيم}\n}`;
    }

    if (عقدة.اوامر_نهاية && عقدة.اوامر_نهاية.length > 0) {
        const اوامر_نهاية = عقدة.اوامر_نهاية;
        const القيم = اوامر_نهاية
            .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
            .join("\n");

        الشفرة_كاملة += `finally {\n${القيم}\n}`;
    }

    return الشفرة_كاملة;
}
