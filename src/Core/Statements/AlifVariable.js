import { تحقق, تطابق, السابق, التالي, احصل } from "../TokenUtils.js";
import { محلل_التعبير } from "../Expressions.js";
import { إنشاء_الشفرة } from "../../AlifGenerator.js";
import { رمي_خطأ } from "../AlifErrors.js";

export let ذاكرة_المتغيرات = [];

export function محلل_متغير(الرموز) {
    if (!الرموز || !Array.isArray(الرموز)) {
        throw new Error('الرموز غير معرفة أو غير صحيحة "محلل_متغير" ' + الرموز);
    }
    let أول;
    let أسماء = [];
    let أسماء_صنف = [];

    if (تحقق(الرموز, "معرف", "هذا")) {
        أسماء_صنف.push(تطابق(الرموز, "معرف", "هذا").القيمة);
        أسماء_صنف.push(تطابق(الرموز, "نقطة").القيمة);
        أسماء_صنف.push(تطابق(الرموز, "معرف").القيمة);
    } else {
        أول = تطابق(الرموز, "معرف");

        // دعم المتغيرات المتعددة مثل: س,ص = 7, 9
        if (!أول) return null;

        // دعم س[5]
        let اسم_المتغير = أول.القيمة;
        if (تحقق(الرموز, "اقواس", "[")) {
            التالي(الرموز); // تخطي الـ '['
            const الفهرس = محلل_التعبير(الرموز);
            if (!تطابق(الرموز, "اقواس", "]")) {
                رمي_خطأ('توقع إغلاق القوس "]"', الرموز);
            }
            اسم_المتغير = `${اسم_المتغير}[${الفهرس.قيمة || الفهرس.اسم}]`;
        }

        أسماء = [اسم_المتغير];

        // جمع أي معرفات إضافية مفصولة بفاصلة
        if (تحقق(الرموز, "فاصلة")) {
            while (تحقق(الرموز, "فاصلة")) {
                تطابق(الرموز, "فاصلة");
                const t = تطابق(الرموز, "معرف");
                if (!t) رمي_خطأ(`لا يوجد اسم متغير بعد الفاصلة`, الرموز);

                let متغير = t.القيمة;
                // دعم الفهارس للمتغيرات الإضافية
                if (تحقق(الرموز, "اقواس", "[")) {
                    التالي(الرموز); // تخطي الـ '['
                    const الفهرس = محلل_التعبير(الرموز);
                    if (!تطابق(الرموز, "اقواس", "]")) {
                        رمي_خطأ('توقع إغلاق القوس "]"', الرموز);
                    }
                    متغير = { نوع: "فهرس_عنصر", قائمة: متغير, فهرس: الفهرس };
                }

                أسماء.push(متغير);
            }
        }
    }

    // تحقق من وجود علامة الإسناد
    if (تحقق(الرموز, "علامة_إسناد", "=") && تطابق(الرموز, "علامة_إسناد", "=")) {
        التالي(الرموز);
        if (تحقق(الرموز, "كلمة", "إذا") || تحقق(الرموز, "كلمة", "اذا")) {
            التالي(الرموز);
        }
        السابق(الرموز);
        const قيم = [];
        const قيمة = محلل_التعبير(الرموز);
        if (!قيمة) رمي_خطأ(`لا يوجد قيمة بعد علامة الإسناد`, الرموز);

        قيم.push(قيمة);

        // جمع أي قيم إضافية مفصولة بفاصلة
        while (تحقق(الرموز, "فاصلة")) {
            تطابق(الرموز, "فاصلة");
            const قيمة = محلل_التعبير(الرموز);
            if (!قيمة) رمي_خطأ(`لا يوجد قيمة بعد الفاصلة`, الرموز);

            قيم.push(قيمة);
        }

        // إذا كان تعيين واحد فقط
        if (
            (أسماء.length === 1 && قيم.length === 1) ||
            أسماء_صنف.length === 3
        ) {
            return { نوع: "متغير", اسم: أسماء[0], أسماء_صنف, قيمة: قيم[0] };
        } else if (أسماء.length === 1 && قيم.length > 1) {
            return { نوع: "متغير", اسم: أسماء[0], أسماء_صنف, قيمة: قيم };
        }

        // تعيين متعدد
        return { نوع: "متغير_مجمع", أسماء, أسماء_صنف, قيم };
    }

    السابق(الرموز);
    return محلل_التعبير(الرموز);
}

export function تحديث_ذاكرة_المتغير(اسم, قيمة) {
    let نوع_القيمة;
    const مصفوفة = قيمة.trim().startsWith("[") && قيمة.trim().endsWith("]");
    const فهرس = قيمة.trim().startsWith("{") && قيمة.trim().endsWith("}");
    const رقم = !isNaN(قيمة);
    const نص =
        (قيمة.trim().startsWith('"') && قيمة.trim().endsWith('"')) ||
        (قيمة.trim().startsWith("'") && قيمة.trim().endsWith("'"));

    if (مصفوفة) نوع_القيمة = "مصفوفة";
    else if (فهرس) نوع_القيمة = "فهرس";
    else if (رقم) نوع_القيمة = "رقم";
    else if (نص) نوع_القيمة = "نص";
    else نوع_القيمة = "امر";

    const موجود = ذاكرة_المتغيرات.findIndex((م) => م.الاسم === اسم);
    if (موجود !== -1) {
        ذاكرة_المتغيرات[موجود].القيمة = قيمة;
        ذاكرة_المتغيرات[موجود].نوع_القيمة = نوع_القيمة;
    } else {
        ذاكرة_المتغيرات.push({
            الاسم: اسم,
            القيمة: قيمة,
            نوع_القيمة,
        });
    }
}

export function منشئ_متغير(مستوى, عداد, عقدة) {
    let هو_معلن;
    let الاسم = عقدة.اسم;
    const أسماء_صنف = عقدة.أسماء_صنف;

    if (!الاسم) {
        هو_معلن = true;
        الاسم =
            (أسماء_صنف[0] === "هذا" ? "this" : أسماء_صنف[0]) +
            أسماء_صنف[1] +
            أسماء_صنف[2];
    } else {
        if (!عداد.بحث_متغير) {
            عداد.بحث_متغير = new Set();
        }
        هو_معلن = عداد.بحث_متغير.has(الاسم);
    }

    let القيمة;
    if (Array.isArray(عقدة.قيمة)) {
        القيمة = عقدة.قيمة
            .map((قيمة) => إنشاء_الشفرة(قيمة, مستوى, عداد))
            .join(", ");
        القيمة = `[${القيمة}]`;
    } else {
        القيمة = إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد);
    }

    if (هو_معلن || الاسم.includes("[")) {
        // تحديث قيمة المتغير في الذاكرة
        if (!الاسم.includes("[")) {
            تحديث_ذاكرة_المتغير(الاسم, القيمة);
        }
        return `${الاسم} = ${القيمة};`;
    } else {
        // إضافة متغير جديد إلى الذاكرة
        if (!الاسم.includes("[")) {
            تحديث_ذاكرة_المتغير(الاسم, القيمة);
        }
        عداد.بحث_متغير.add(الاسم);
        return `let ${الاسم} = ${القيمة};`;
    }
}

export function منشئ_متغير_مجمع(مستوى, عداد, عقدة) {
    if (!عداد.بحث_متغير) عداد.بحث_متغير = new Set();
    const أسماء = عقدة.أسماء;
    const قيم = عقدة.قيم.map((v) => إنشاء_الشفرة(v, مستوى, عداد));
    return أسماء
        .map((الاسم, index) => {
            const قيمة = قيم[index] !== undefined ? قيم[index] : "undefined";
            if (عداد.بحث_متغير.has(الاسم) || الاسم.includes("[")) {
                // تحديث قيمة المتغير في الذاكرة
                if (!الاسم.includes("[")) {
                    تحديث_ذاكرة_المتغير(الاسم, قيمة);
                }
                return `${الاسم} = ${قيمة};`;
            } else {
                // إضافة متغير جديد إلى الذاكرة
                if (!الاسم.includes("[")) {
                    تحديث_ذاكرة_المتغير(الاسم, قيمة);
                }
                عداد.بحث_متغير.add(الاسم);
                return `let ${الاسم} = ${قيمة};`;
            }
        })
        .join("\n");
}
