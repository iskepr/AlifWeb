import { احصل, تحقق, تطابق, المؤشر, السابق } from "../TokenUtils.js";
import { محلل_التعبير } from "../Expressions.js";
import { إنشاء_الشفرة } from "../../AlifGenerator.js";

export function محلل_متغير(الرموز) {
    if (!الرموز || !Array.isArray(الرموز)) {
        throw new Error('الرموز غير معرفة أو غير صحيحة "محلل_متغير" ' + الرموز);
    }
    // دعم المتغيرات المتعددة مثل: س,ص = 7, 9
    const البداية = المؤشر;
    const أول = تطابق(الرموز, "معرف");
    if (!أول) return null;
    const أسماء = [أول.القيمة];
    // جمع أي معرفات إضافية مفصولة بفاصلة
    while (تحقق(الرموز, "فاصلة")) {
        تطابق(الرموز, "فاصلة");
        const t = تطابق(الرموز, "معرف");
        if (!t) {
            const error = new Error(`لا يوجد اسم متغير بعد الفاصلة`);
            error.line = `في السطر ` + احصل(الرموز).السطر;
            throw error;
        }
        أسماء.push(t.القيمة);
    }
    // تحقق من وجود علامة الإسناد
    if (تحقق(الرموز, "علامة_إسناد", "=") && تطابق(الرموز, "علامة_إسناد", "=")) {
        const قيم = [];
        const قيمة = محلل_التعبير(الرموز);
        if (!قيمة) {
            const error = new Error(`لا يوجد قيمة بعد علامة الإسناد`);
            error.line = `في السطر ` + احصل(الرموز).السطر;
            throw error;
        }
        قيم.push(قيمة);
        // جمع أي قيم إضافية مفصولة بفاصلة
        while (تحقق(الرموز, "فاصلة")) {
            تطابق(الرموز, "فاصلة");
            const قيمة = محلل_التعبير(الرموز);
            if (!قيمة) {
                const error = new Error(`لا يوجد قيمة بعد الفاصلة`);
                error.line = `في السطر ` + احصل(الرموز).السطر;
                throw error;
            }
            قيم.push(قيمة);
        }
        // إذا كان تعيين واحد فقط
        if (أسماء.length === 1 && قيم.length === 1) {
            return { نوع: "متغير", اسم: أسماء[0], قيمة: قيم[0] };
        }
        // تعيين متعدد
        return { نوع: "متغير_مجمع", أسماء, قيم };
    } else if (تحقق(الرموز, "رمز_حسابي")) {
        السابق(الرموز);
        return محلل_التعبير(الرموز);
    }
    // لا يوجد إسناد، أعد المؤشر
    المؤشر = البداية;
    return null;
}

export function منشئ_متغير(مستوى, عداد, عقدة) {
    const الاسم = عقدة.اسم;
    const القيمة = إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد);
    // تتبع المتغيرات المعلنة لتجنّب إعادة let
    if (!عداد.declaredVars) عداد.declaredVars = new Set();
    if (عداد.declaredVars.has(الاسم)) {
        return `${الاسم} = ${القيمة};`;
    } else {
        عداد.declaredVars.add(الاسم);
        return `let ${الاسم} = ${القيمة};`;
    }
}

export function منشئ_متغير_مجمع(مستوى, عداد, عقدة) {
    if (!عداد.declaredVars) عداد.declaredVars = new Set();
    const أسماء = عقدة.أسماء;
    const قيم = عقدة.قيم.map((v) => إنشاء_الشفرة(v, مستوى, عداد));
    return أسماء
        .map((الاسم, index) => {
            const قيمة = قيم[index] !== undefined ? قيم[index] : "undefined";
            if (عداد.declaredVars.has(الاسم)) {
                return `${الاسم} = ${قيمة};`;
            } else {
                عداد.declaredVars.add(الاسم);
                return `let ${الاسم} = ${قيمة};`;
            }
        })
        .join("\n");
}
