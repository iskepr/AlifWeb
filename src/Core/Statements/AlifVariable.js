import { تحقق, تطابق, السابق, التالي } from "../TokenUtils.js";
import { محلل_التعبير } from "../Expressions.js";
import { إنشاء_الشفرة } from "../../AlifGenerator.js";
import { رمي_خطأ } from "../AlifErrors.js";

export function محلل_متغير(الرموز) {
    if (!الرموز || !Array.isArray(الرموز)) {
        throw new Error('الرموز غير معرفة أو غير صحيحة "محلل_متغير" ' + الرموز);
    }
    // دعم المتغيرات المتعددة مثل: س,ص = 7, 9
    const أول = تطابق(الرموز, "معرف");
    if (!أول) return null;
    const أسماء = [أول.القيمة];

    // جمع أي معرفات إضافية مفصولة بفاصلة
    while (تحقق(الرموز, "فاصلة")) {
        تطابق(الرموز, "فاصلة");
        const t = تطابق(الرموز, "معرف");
        if (!t) رمي_خطأ(`لا يوجد اسم متغير بعد الفاصلة`, الرموز);

        أسماء.push(t.القيمة);
    }

    // تحقق من وجود علامة الإسناد
    if (تحقق(الرموز, "علامة_إسناد", "=") && تطابق(الرموز, "علامة_إسناد", "=")) {
        التالي(الرموز);
        if (تحقق(الرموز, "كلمة", "إذا") || تحقق(الرموز, "كلمة", "اذا")) {
            التالي(الرموز);
        }
        السابق(الرموز);
        const قيم = [];
        const قيمة = محلل_التعبير(الرموز);
        if (!قيمة) رمي_خطأ(`لا يوجد قيمة بعد علامة الإسناد`, الرموز);

        قيم.push(قيمة);

        // جمع أي قيم إضافية مفصولة بفاصلة
        while (تحقق(الرموز, "فاصلة")) {
            تطابق(الرموز, "فاصلة");
            const قيمة = محلل_التعبير(الرموز);
            if (!قيمة) رمي_خطأ(`لا يوجد قيمة بعد الفاصلة`, الرموز);

            قيم.push(قيمة);
        }

        // إذا كان تعيين واحد فقط
        if (أسماء.length === 1 && قيم.length === 1) {
            return { نوع: "متغير", اسم: أسماء[0], قيمة: قيم[0] };
        } else if (أسماء.length === 1 && قيم.length > 1) {
            return { نوع: "متغير", اسم: أسماء[0], قيمة: قيم };
        }

        // تعيين متعدد
        return { نوع: "متغير_مجمع", أسماء, قيم };
    }
    السابق(الرموز);
    return محلل_التعبير(الرموز);
}

export function منشئ_متغير(مستوى, عداد, عقدة) {
    const الاسم = عقدة.اسم;

    if (!عداد.بحث_متغير) {
        عداد.بحث_متغير = new Set();
    }
    const هو_معلن = عداد.بحث_متغير.has(الاسم);
    let القيمة;
    if (Array.isArray(عقدة.قيمة)) {
        القيمة = عقدة.قيمة
            .map((قيمة) => إنشاء_الشفرة(قيمة, مستوى, عداد))
            .join(", ");
        القيمة = `[${القيمة}]`;
    } else {
        القيمة = إنشاء_الشفرة(عقدة.قيمة, مستوى, عداد);
    }

    if (هو_معلن) {
        return `${الاسم} = ${القيمة};`;
    } else {
        عداد.بحث_متغير.add(الاسم);
        return `let ${الاسم} = ${القيمة};`;
    }
}

export function منشئ_متغير_مجمع(مستوى, عداد, عقدة) {
    if (!عداد.بحث_متغير) عداد.بحث_متغير = new Set();
    const أسماء = عقدة.أسماء;
    const قيم = عقدة.قيم.map((v) => إنشاء_الشفرة(v, مستوى, عداد));
    return أسماء
        .map((الاسم, index) => {
            const قيمة = قيم[index] !== undefined ? قيم[index] : "undefined";
            if (عداد.بحث_متغير.has(الاسم)) {
                return `${الاسم} = ${قيمة};`;
            } else {
                عداد.بحث_متغير.add(الاسم);
                return `let ${الاسم} = ${قيمة};`;
            }
        })
        .join("\n");
}
