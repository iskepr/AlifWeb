import { التالي, تحقق, تطابق } from "../TokenUtils.js";
import { محلل_التعبير } from "../Expressions.js";

export function محلل_العمليات(الرموز) {
    if (!الرموز || !Array.isArray(الرموز)) {
        throw new Error(
            'الرموز غير معرفة أو غير صحيحة "محلل_العمليات" ' + الرموز
        );
    }

    while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد")) التالي(الرموز);

    let يسار;
    if (تطابق(الرموز, "اقواس", "(")) {
        يسار = محلل_التعبير(الرموز);
        if (!تطابق(الرموز, "اقواس", ")")) {
            throw new Error("مفقود قوس الإغلاق ')'");
        }
    } else {
        يسار = تطابق(الرموز, "رقم") || تطابق(الرموز, "معرف");
        if (!يسار) {
            throw new Error("متوقع رقم أو معرف");
        }
    }

    const عامل = تطابق(الرموز, "رمز_حسابي");
    if (!عامل || !("القيمة" in عامل)) {
        throw new Error("متوقع رمز حسابي بين الأرقام");
    }

    let يمين;
    if (تطابق(الرموز, "اقواس", "(")) {
        يمين = محلل_التعبير(الرموز);
        if (!تطابق(الرموز, "اقواس", ")")) {
            throw new Error("مفقود قوس الإغلاق ')'");
        }
    } else {
        يمين = تطابق(الرموز, "رقم") || تطابق(الرموز, "معرف");
        if (!يمين) {
            throw new Error("متوقع رقم أو معرف");
        }
    }

    while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد")) التالي(الرموز);

    return {
        نوع: "عملية",
        القيم: {
            يسار: {
                نوع: "عدد",
                قيمة: !isNaN(Number(يسار.القيمة))
                    ? Number(يسار.القيمة)
                    : يسار.القيمة
                    ? يسار.القيمة
                    : يسار,
            },
            عامل: { نوع: "رمز_حسابي", قيمة: عامل.القيمة },
            يمين: {
                نوع: "عدد",
                قيمة: !isNaN(Number(يمين.القيمة))
                    ? Number(يمين.القيمة)
                    : يمين.القيمة
                    ? يمين.القيمة
                    : يمين,
            },
        },
    };
}

export function منشئ_عمليات(عقدة) {
    let يسار = عقدة.القيم.يسار.قيمة;
    let عامل = عقدة.القيم.عامل.قيمة;
    let يمين = عقدة.القيم.يمين.قيمة;

    let مع_متغير =
        typeof يسار == "number" && typeof يمين == "number" ? false : true;

    if (typeof يسار === "object") {
        يسار = منشئ_عمليات(يسار);
    }
    if (typeof يمين === "object") {
        يمين = منشئ_عمليات(يمين);
    }

    let الناتج = null;
    switch (عامل) {
        case "+":
            مع_متغير ? (الناتج = `${يسار} + ${يمين}`) : (الناتج = يسار + يمين);
            break;
        case "-":
            مع_متغير ? (الناتج = `${يسار} - ${يمين}`) : (الناتج = يسار - يمين);
            break;
        case "*":
            مع_متغير ? (الناتج = `${يسار} * ${يمين}`) : (الناتج = يسار * يمين);
            break;
        case "\\":
            مع_متغير ? (الناتج = `${يسار} / ${يمين}`) : (الناتج = يسار / يمين); // قسمة
            break;
        case "\\\\": // باقي القسمة
            مع_متغير ? (الناتج = `${يسار} % ${يمين}`) : (الناتج = يسار % يمين);
            break;
        case "\\*": // ناتج القسمة
            مع_متغير
                ? (الناتج = `Math.floor(${يسار} / ${يمين})`)
                : (الناتج = Math.floor(يسار / يمين));
            break;
        case "^":
            مع_متغير
                ? (الناتج = `Math.pow(${يسار}, ${يمين})`)
                : (الناتج = Math.pow(يسار, يمين)); // قوة
            break;
        case "\\^":
            مع_متغير
                ? (الناتج = `Math.sqrt(${يمين})`)
                : (الناتج = Math.sqrt(يمين)); // جذر
            break;

        // المقارنات
        case ">":
            مع_متغير ? (الناتج = `${يسار} > ${يمين}`) : (الناتج = يسار > يمين);
            break;
        case "<":
            مع_متغير ? (الناتج = `${يسار} < ${يمين}`) : (الناتج = يسار < يمين);
            break;
        case "=":
            مع_متغير ? (الناتج = `${يسار} = ${يمين}`) : (الناتج = يسار = يمين);
            break;
        case "==":
            مع_متغير
                ? (الناتج = `${يسار} == ${يمين}`)
                : (الناتج = يسار == يمين);
            break;
        case "!=":
            مع_متغير
                ? (الناتج = `${يسار} != ${يمين}`)
                : (الناتج = يسار != يمين);
            break;
        case ">=":
            مع_متغير
                ? (الناتج = `${يسار} >= ${يمين}`)
                : (الناتج = يسار >= يمين);
            break;
        case "<=":
            مع_متغير
                ? (الناتج = `${يسار} <= ${يمين}`)
                : (الناتج = يسار <= يمين);
            break;
        case "و":
            مع_متغير
                ? (الناتج = `${يسار} && ${يمين}`)
                : (الناتج = يسار && يمين);
            break;
        case "او":
        case "أو":
            مع_متغير
                ? (الناتج = `${يسار} || ${يمين}`)
                : (الناتج = يسار || يمين);
            break;
        case "ليس":
            مع_متغير ? (الناتج = `!${يسار}`) : (الناتج = !يسار);
            break;
        default:
            throw new Error("رمز حسابي غير معروف");
    }

    return مع_متغير ? الناتج : الناتج.toString();
}
