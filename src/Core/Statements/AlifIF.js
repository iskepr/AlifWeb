import { التالي, السابق, تحقق, تطابق } from "../TokenUtils.js";
import { محلل_التعبير } from "../Expressions.js";
import { إدارة_المسافة_البادئة } from "../Indentation.js";
import { إنشاء_الشفرة } from "../../AlifGenerator.js";
import { رمي_خطأ } from "../AlifErrors.js";

export function محلل_اذا(الرموز, الدالة_الام) {
    let هل_تعبير_شرطي = false;
    السابق(الرموز);
    let قيمة_اولى = null;
    if (!تحقق(الرموز, "سطر_جديد") || !تحقق(الرموز, "مسافة")) {
        if (تحقق(الرموز, "رقم") || تحقق(الرموز, "نص") || تحقق(الرموز, "معرف")) {
            قيمة_اولى = محلل_التعبير(الرموز, الدالة_الام);
            هل_تعبير_شرطي = true;
        } else {
            let الحد = 0;
            while (true) {
                الحد++;
                السابق(الرموز);
                if (
                    تحقق(الرموز, "كلمة") ||
                    تحقق(الرموز, "اقواس", "[") ||
                    تحقق(الرموز, "اقواس", "{")
                )
                    break;
                else {
                    الحد--;
                    if (الحد == 0) break;
                }
            }
            قيمة_اولى = محلل_التعبير(الرموز, الدالة_الام);
            هل_تعبير_شرطي = true;
        }
    }

    التالي(الرموز);
    تطابق(الرموز, "كلمة", "اذا") || تطابق(الرموز, "كلمة", "إذا");
    // تخطي المسافات الفارغة
    while (تحقق(الرموز, "مسافة")) التالي(الرموز);

    // الشروط
    let شروط_اذا = [];
    let اوامر_اذا = [];
    while (!تحقق(الرموز, "نقطتان")) {
        const القيمة = محلل_التعبير(الرموز, الدالة_الام);
        if (!القيمة) رمي_خطأ(`لا يوجد شرط صحيح في اذا`, الرموز, الدالة_الام);

        شروط_اذا.push(القيمة);
        if (تحقق(الرموز, "كلمة", "والا")) break;
    }
    if (تحقق(الرموز, "نقطتان")) تطابق(الرموز, "نقطتان");
    else {
        if (هل_تعبير_شرطي) {
            if (تحقق(الرموز, "كلمة", "والا") || تحقق(الرموز, "كلمة", "وإلا")) {
                تطابق(الرموز, "كلمة");
                const بديل = محلل_التعبير(الرموز, الدالة_الام);
                if (!بديل)
                    رمي_خطأ("توقعت قيمة بعد 'والا'", الرموز, الدالة_الام);
                return {
                    نوع: "تعبير_شرطي",
                    الشرط: شروط_اذا[0],
                    قيمة_اولى: قيمة_اولى,
                    قيمة_ثانية: بديل,
                };
            } else
                رمي_خطأ(
                    "توقع 'والا' بعد الشرط في التعبير الشرطي",
                    الرموز,
                    الدالة_الام
                );
        }
    }
    // اوامر اذا
    اوامر_اذا = إدارة_المسافة_البادئة(الرموز, الدالة_الام, "اذا");
    if (!تحقق(الرموز, "مسافة")) return { نوع: "اذا", شروط_اذا, اوامر_اذا };

    return {
        نوع: "اذا",
        شروط_اذا,
        اوامر_اذا,
    };
}

// ----------- القيم اواذا (اختياري) -----------
export function محلل_اواذا(الرموز, الدالة_الام) {
    let شروط_اواذا = [];
    تطابق(الرموز, "كلمة", "اواذا") || تحقق(الرموز, "كلمة", "اوإذا");

    // تخطي المسافات الفارغة
    while (تحقق(الرموز, "مسافة")) التالي(الرموز);

    // الشروط
    while (true) {
        const القيمة = محلل_التعبير(الرموز, الدالة_الام);
        if (!القيمة) رمي_خطأ(`لا يوجد شرط صحيح في اوإذا`, الرموز, الدالة_الام);

        شروط_اواذا.push(القيمة);
        if (تطابق(الرموز, "نقطتان")) break;
    }
    تطابق(الرموز, "نقطتان");

    let اوامر_اواذا = إدارة_المسافة_البادئة(الرموز, الدالة_الام, "اواذا");
    if (!تحقق(الرموز, "مسافة"))
        return { نوع: "اواذا", شروط_اواذا, اوامر_اواذا };

    return {
        نوع: "اواذا",
        اوامر_اواذا,
        شروط_اواذا,
    };
}

//  -----------القيم والا (اختياري) -----------
export function محلل_والا(الرموز, الدالة_الام) {
    تطابق(الرموز, "كلمة", "والا") || تحقق(الرموز, "كلمة", "وإلا");

    // تخطي المسافات الفارغة
    while (تحقق(الرموز, "مسافة")) التالي(الرموز);

    تطابق(الرموز, "نقطتان");

    let اوامر_والا = إدارة_المسافة_البادئة(الرموز, الدالة_الام, "والا");
    if (!تحقق(الرموز, "مسافة")) return { نوع: "والا", اوامر_والا };

    return {
        نوع: "والا",
        اوامر_والا,
    };
}

export function منشئ_اذا(مستوى, عداد, عقدة, داخل_برنامج) {
    const شروط_اذا = عقدة.شروط_اذا;
    const اوامر_اذا = عقدة.اوامر_اذا;

    const الشرط = شروط_اذا
        .map((ش) => إنشاء_الشفرة(ش, مستوى, عداد, داخل_برنامج))
        .join(" && ");

    const القيم = اوامر_اذا
        .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
        .join("\n");

    return `if (${الشرط}) {\n${القيم}\n}`;
}

export function منشئ_اواذا(مستوى, عداد, عقدة, داخل_برنامج) {
    const شروط_اواذا = عقدة.شروط_اواذا
        .map((ش) => إنشاء_الشفرة(ش, مستوى, عداد, داخل_برنامج))
        .join(" && ");

    const اوامر_اواذا = عقدة.اوامر_اواذا
        .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
        .join("\n");

    return ` else if (${شروط_اواذا}) {\n${اوامر_اواذا}\n}`;
}

export function منشئ_والا(مستوى, عداد, عقدة, داخل_برنامج) {
    const اوامر_والا = عقدة.اوامر_والا
        .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
        .join("\n");

    return ` else {\n${اوامر_والا}\n}`;
}
