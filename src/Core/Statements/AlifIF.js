import { احصل, التالي, تحقق, تطابق, المؤشر } from "../TokenUtils.js";
import { محلل_التعبير } from "../Expressions.js";
import { محلل_الجملة } from "../../AlifParser.js";
import { إنشاء_الشفرة } from "../../AlifGenerator.js";

export function محلل_اذا(الرموز) {
    if (!الرموز || !Array.isArray(الرموز)) {
        throw new Error('الرموز غير معرفة أو غير صحيحة "محلل_اذا" ' + الرموز);
    }
    تطابق(الرموز, "كلمة", "اذا") || تطابق(الرموز, "كلمة", "إذا");
    // تخطي المسافات والأسطر الفارغة
    while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد")) التالي(الرموز);

    // الشروط
    let شروط_اذا = [];
    while (true) {
        const القيمة = محلل_التعبير(الرموز);
        if (!القيمة) {
            const error = new Error(`لا يوجد شرط صحيح في if`);
            error.line = `في السطر ` + احصل(الرموز).السطر;
            throw error;
        }
        شروط_اذا.push(القيمة);
        if (تطابق(الرموز, "نقطتان")) break;
    }

    // القيم اذا
    const اوامر_اذا = [];
    while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
    if (!تحقق(الرموز, "مسافة")) {
        return { نوع: "اذا", شروط_اذا, اوامر_اذا };
    }
    const التبويب = احصل(الرموز).القيمة.length;
    التالي(الرموز);
    const جملة = محلل_الجملة(الرموز);
    if (!جملة) {
        const error = new Error(`لا يوجد جملة صحيحة في اذا`);
        error.line = `في السطر ` + احصل(الرموز).السطر;
        throw error;
    }
    اوامر_اذا.push(جملة);
    while (true) {
        while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
        if (!تحقق(الرموز, "مسافة") || احصل(الرموز).القيمة.length < التبويب)
            break;
        التالي(الرموز);
        const جملة = محلل_الجملة(الرموز);
        if (!جملة) {
            const error = new Error(`لا يوجد جملة صحيحة في اذا`);
            error.line = `في السطر ` + احصل(الرموز).السطر;
            throw error;
        }
        اوامر_اذا.push(جملة);
    }
    return {
        نوع: "اذا",
        شروط_اذا,
        اوامر_اذا,
    };
}

// ----------- القيم اواذا (اختياري) -----------
export function محلل_اواذا(الرموز) {
    let اوامر_اواذا = [];
    let شروط_اواذا = [];
    تطابق(الرموز, "كلمة", "اواذا") || تحقق(الرموز, "كلمة", "اوإذا");
    // الشروط
    while (true) {
        const القيمة = محلل_التعبير(الرموز);
        if (!القيمة) {
            const error = new Error(`لا يوجد شرط صحيح في اوإذا`);
            error.line = `في السطر ` + احصل(الرموز).السطر;
            throw error;
        }
        شروط_اواذا.push(القيمة);
        if (تطابق(الرموز, "نقطتان")) break;
    }
    تطابق(الرموز, "نقطتان");

    while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
    if (!تحقق(الرموز, "مسافة")) {
        return { نوع: "اواذا", شروط_اواذا, اوامر_اواذا };
    }
    const التبويب = احصل(الرموز).القيمة.length;
    التالي(الرموز);
    const جملة = محلل_الجملة(الرموز);
    if (!جملة) {
        const error = new Error(`لا يوجد جملة صحيحة في اوإذا`);
        error.line = `في السطر ` + احصل(الرموز).السطر;
        throw error;
    }
    اوامر_اواذا.push(جملة);
    while (true) {
        while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
        if (!تحقق(الرموز, "مسافة") || احصل(الرموز).القيمة.length < التبويب)
            break;
        التالي(الرموز);
        const جملة = محلل_الجملة(الرموز);
        if (!جملة) {
            const error = new Error(`لا يوجد جملة صحيحة في اوإذا`);
            error.line = `في السطر ` + احصل(الرموز).السطر;
            throw error;
        }
        اوامر_اواذا.push(جملة);
    }

    return {
        نوع: "اواذا",
        اوامر_اواذا,
        شروط_اواذا,
    };
}

//  -----------القيم والا (اختياري) -----------
export function محلل_والا(الرموز) {
    let اوامر_والا = [];
    تطابق(الرموز, "كلمة", "والا") || تحقق(الرموز, "كلمة", "وإلا");
    تطابق(الرموز, "نقطتان");

    while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
    if (!تحقق(الرموز, "مسافة")) {
        return { نوع: "والا", اوامر_والا };
    }
    const التبويب = احصل(الرموز).القيمة.length;
    التالي(الرموز);
    const جملة = محلل_الجملة(الرموز);
    if (!جملة) {
        const error = new Error(`لا يوجد جملة صحيحة في والا`);
        error.line = `في السطر ` + احصل(الرموز).السطر;
        throw error;
    }
    اوامر_والا.push(جملة);
    while (true) {
        while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
        if (!تحقق(الرموز, "مسافة") || احصل(الرموز).القيمة.length < التبويب)
            break;
        التالي(الرموز);
        const جملة = محلل_الجملة(الرموز);
        if (!جملة) {
            const error = new Error(`لا يوجد جملة صحيحة في والا`);
            error.line = `في السطر ` + احصل(الرموز).السطر;
            throw error;
        }
        اوامر_والا.push(جملة);
    }

    return {
        نوع: "والا",
        اوامر_والا,
    };
}

export function منشئ_اذا(مستوى, عداد, عقدة, داخل_برنامج) {
    if (!عقدة || typeof عقدة !== "object") {
        throw new Error("العقدة غير معرفة أو غير صحيحة في منشئ_اذا");
    }

    const شروط_اذا = عقدة.شروط_اذا || [];
    if (!Array.isArray(شروط_اذا)) {
        throw new Error("شروط_اذا غير معرفة أو غير صحيحة في منشئ_اذا");
    }

    let كود = "";

    if (
        عقدة.اوامر_اذا &&
        عقدة.اوامر_اذا.length > 0 &&
        عقدة.شروط_اذا &&
        عقدة.شروط_اذا.length > 0
    ) {
        const الشرط = شروط_اذا
            .map((ش) => إنشاء_الشفرة(ش, مستوى, عداد, داخل_برنامج))
            .join(" && ");

        const اوامر_اذا = عقدة.اوامر_اذا || [];
        if (!Array.isArray(اوامر_اذا)) {
            throw new Error("اوامر_اذا غير معرفة أو غير صحيحة في منشئ_اذا");
        }
        const القيم = اوامر_اذا
            .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
            .join("\n");

        كود += `if (${الشرط}) {\n${القيم}\n}`;
    }

    if (
        عقدة.اوامر_اواذا &&
        عقدة.اوامر_اواذا.length > 0 &&
        عقدة.شروط_اواذا &&
        عقدة.شروط_اواذا.length > 0
    ) {
        const شروط_اواذا = عقدة.شروط_اواذا
            .map((ش) => إنشاء_الشفرة(ش, مستوى, عداد, داخل_برنامج))
            .join(" && ");

        const اوامر_اواذا = عقدة.اوامر_اواذا
            .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
            .join("\n");

        كود += ` else if (${شروط_اواذا}) {\n${اوامر_اواذا}\n}`;
    }

    if (عقدة.اوامر_والا && عقدة.اوامر_والا.length > 0) {
        const اوامر_والا = عقدة.اوامر_والا
            .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
            .join("\n");

        كود += ` else {\n${اوامر_والا}\n}`;
    }

    return كود;
}
