import { التالي, السابق, تحقق, تطابق } from "../TokenUtils.js";
import { محلل_التعبير } from "../Expressions.js";
import { إدارة_المسافة_البادئة } from "../Indentation.js";
import { إنشاء_الشفرة } from "../../AlifGenerator.js";
import { رمي_خطأ } from "../AlifErrors.js";

export function محلل_اذا(الرموز) {
    if (!الرموز || !Array.isArray(الرموز)) {
        throw new Error('الرموز غير معرفة أو غير صحيحة "محلل_اذا" ' + الرموز);
    }
    let هل_تعبير_شرطي = false;
    السابق(الرموز);
    let قيمة_اولى = null;
    if (!تحقق(الرموز, "سطر_جديد") || !تحقق(الرموز, "مسافة")) {
        قيمة_اولى = محلل_التعبير(الرموز);
        هل_تعبير_شرطي = true;
        if (قيمة_اولى === "نوع غير معروف" && !تحقق(الرموز, "كلمة")) {
            if (!تحقق(الرموز, "كلمة")) {
                السابق(الرموز);
                قيمة_اولى = محلل_التعبير(الرموز);
            }
        }
    }

    التالي(الرموز);
    تطابق(الرموز, "كلمة", "اذا") || تطابق(الرموز, "كلمة", "إذا");
    // تخطي المسافات والأسطر الفارغة
    while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد")) التالي(الرموز);

    // الشروط
    let شروط_اذا = [];
    let اوامر_اذا = [];
    while (!تحقق(الرموز, "نقطتان")) {
        const القيمة = محلل_التعبير(الرموز);
        if (!القيمة) رمي_خطأ(`لا يوجد شرط صحيح في اذا`, الرموز);

        شروط_اذا.push(القيمة);
        if (تحقق(الرموز, "كلمة", "والا")) break;
    }
    if (تحقق(الرموز, "نقطتان")) {
        تطابق(الرموز, "نقطتان");
    } else {
        if (هل_تعبير_شرطي) {
            if (تحقق(الرموز, "كلمة", "والا") || تحقق(الرموز, "كلمة", "وإلا")) {
                تطابق(الرموز, "كلمة");
                const بديل = محلل_التعبير(الرموز);
                if (!بديل) throw new Error("توقع قيمة بعد 'والا'");
                return {
                    نوع: "تعبير_شرطي",
                    الشرط: شروط_اذا[0],
                    قيمة_اولى: قيمة_اولى,
                    قيمة_ثانية: بديل,
                };
            } else {
                throw new Error("توقع 'والا' بعد الشرط في التعبير الشرطي");
            }
        }
    }
    // اوامر اذا
    اوامر_اذا = إدارة_المسافة_البادئة(الرموز, "اذا");
    if (!تحقق(الرموز, "مسافة")) {
        return { نوع: "اذا", شروط_اذا, اوامر_اذا };
    }
    return {
        نوع: "اذا",
        شروط_اذا,
        اوامر_اذا,
    };
}

// ----------- القيم اواذا (اختياري) -----------
export function محلل_اواذا(الرموز) {
    let شروط_اواذا = [];
    تطابق(الرموز, "كلمة", "اواذا") || تحقق(الرموز, "كلمة", "اوإذا");

    // تخطي المسافات والأسطر الفارغة
    while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد")) التالي(الرموز);

    // الشروط
    while (true) {
        const القيمة = محلل_التعبير(الرموز);
        if (!القيمة) رمي_خطأ(`لا يوجد شرط صحيح في اوإذا`, الرموز);

        شروط_اواذا.push(القيمة);
        if (تطابق(الرموز, "نقطتان")) break;
    }
    تطابق(الرموز, "نقطتان");

    let اوامر_اواذا = إدارة_المسافة_البادئة(الرموز, "اواذا");
    if (!تحقق(الرموز, "مسافة")) {
        return { نوع: "اواذا", شروط_اواذا, اوامر_اواذا };
    }
    return {
        نوع: "اواذا",
        اوامر_اواذا,
        شروط_اواذا,
    };
}

//  -----------القيم والا (اختياري) -----------
export function محلل_والا(الرموز) {
    تطابق(الرموز, "كلمة", "والا") || تحقق(الرموز, "كلمة", "وإلا");

    // تخطي المسافات والأسطر الفارغة
    while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد")) التالي(الرموز);

    تطابق(الرموز, "نقطتان");

    let اوامر_والا = إدارة_المسافة_البادئة(الرموز, "والا");
    if (!تحقق(الرموز, "مسافة")) {
        return { نوع: "والا", اوامر_والا };
    }
    return {
        نوع: "والا",
        اوامر_والا,
    };
}

export function منشئ_اذا(مستوى, عداد, عقدة, داخل_برنامج) {
    if (!عقدة || typeof عقدة !== "object") {
        throw new Error("العقدة غير معرفة أو غير صحيحة في منشئ_اذا");
    }

    const شروط_اذا = عقدة.شروط_اذا || [];
    if (!Array.isArray(شروط_اذا)) {
        throw new Error("شروط_اذا غير معرفة أو غير صحيحة في منشئ_اذا");
    }

    let كود = "";

    if (
        عقدة.اوامر_اذا &&
        عقدة.اوامر_اذا.length > 0 &&
        عقدة.شروط_اذا &&
        عقدة.شروط_اذا.length > 0
    ) {
        const الشرط = شروط_اذا
            .map((ش) => إنشاء_الشفرة(ش, مستوى, عداد, داخل_برنامج))
            .join(" && ");

        const اوامر_اذا = عقدة.اوامر_اذا || [];
        if (!Array.isArray(اوامر_اذا)) {
            throw new Error("اوامر_اذا غير معرفة أو غير صحيحة في منشئ_اذا");
        }
        const القيم = اوامر_اذا
            .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
            .join("\n");

        كود += `if (${الشرط}) {\n${القيم}\n}`;
    }

    if (
        عقدة.اوامر_اواذا &&
        عقدة.اوامر_اواذا.length > 0 &&
        عقدة.شروط_اواذا &&
        عقدة.شروط_اواذا.length > 0
    ) {
        const شروط_اواذا = عقدة.شروط_اواذا
            .map((ش) => إنشاء_الشفرة(ش, مستوى, عداد, داخل_برنامج))
            .join(" && ");

        const اوامر_اواذا = عقدة.اوامر_اواذا
            .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
            .join("\n");

        كود += ` else if (${شروط_اواذا}) {\n${اوامر_اواذا}\n}`;
    }

    if (عقدة.اوامر_والا && عقدة.اوامر_والا.length > 0) {
        const اوامر_والا = عقدة.اوامر_والا
            .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
            .join("\n");

        كود += ` else {\n${اوامر_والا}\n}`;
    }

    return كود;
}
