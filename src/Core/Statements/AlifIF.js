import { احصل, التالي, تحقق, تطابق, المؤشر } from "../TokenUtils.js";
import { محلل_التعبير } from "../Expressions.js";
import { محلل_الجملة } from "../../AlifParser.js";
import { إنشاء_الشفرة } from "../../AlifGenerator.js";

export function محلل_اذا(الرموز) {
    if (!الرموز || !Array.isArray(الرموز)) {
        throw new Error('الرموز غير معرفة أو غير صحيحة "محلل_اذا" ' + الرموز);
    }
    تطابق(الرموز, "كلمة", "اذا") || تطابق(الرموز, "كلمة", "إذا");
    // تخطي المسافات والأسطر الفارغة
    while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد")) التالي(الرموز);

    // الشروط
    let الشروط = [];
    while (true) {
        const القيمة = محلل_التعبير(الرموز);
        if (!القيمة) {
            const error = new Error(`لا يوجد شرط صحيح في if`);
            error.line = `في السطر ` + احصل(الرموز).السطر;
            throw error;
        }
        الشروط.push(القيمة);
        if (تطابق(الرموز, "رمز_حسابي", ":")) break;
    }

    // القيم if
    const القيم = [];
    while (
        المؤشر < الرموز.length &&
        !تحقق(الرموز, "كلمة", "والا") &&
        !تحقق(الرموز, "كلمة", "اذا")
    ) {
        while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
        if (تحقق(الرموز, "مسافة")) {
            التالي(الرموز);
            const جملة = محلل_الجملة(الرموز);
            if (!جملة) {
                const error = new Error(`لا يوجد جملة صحيحة في if`);
                error.line = `في السطر ` + احصل(الرموز).السطر;
                throw error;
            }
            القيم.push(جملة);
        } else {
            break;
        }
    }

    // القيم اواذا (اختياري)
    let اواذا_القيم = [];
    let شروط_اواذا = [];
    if (تطابق(الرموز, "كلمة", "اواذا") || تحقق(الرموز, "كلمة", "اوإذا")) {
        // الشروط
        while (true) {
            const القيمة = محلل_التعبير(الرموز);
            if (!القيمة) {
                const error = new Error(`لا يوجد شرط صحيح في اوإذا`);
                error.line = `في السطر ` + احصل(الرموز).السطر;
                throw error;
            }
            شروط_اواذا.push(القيمة);
            if (تطابق(الرموز, "رمز_حسابي", ":")) break;
        }
        تطابق(الرموز, "رمز_حسابي", ":");
        while (المؤشر < الرموز.length && !تحقق(الرموز, "كلمة", "اذا")) {
            while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
            if (تحقق(الرموز, "مسافة")) {
                التالي(الرموز);
                const جملة = محلل_الجملة(الرموز);
                if (!جملة) {
                    const error = new Error(`لا يوجد جملة صحيحة في اوإذا`);
                    error.line = `في السطر ` + احصل(الرموز).السطر;
                    throw error;
                }
                اواذا_القيم.push(جملة);
            } else {
                break;
            }
        }
    }

    // القيم والا (اختياري)
    let والا_القيم = [];
    if (تطابق(الرموز, "كلمة", "والا") || تحقق(الرموز, "كلمة", "وإلا")) {
        تطابق(الرموز, "رمز_حسابي", ":");
        while (المؤشر < الرموز.length && !تحقق(الرموز, "كلمة", "اذا")) {
            while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
            if (تحقق(الرموز, "مسافة")) {
                التالي(الرموز);
                والا_القيم.push(محلل_الجملة(الرموز));
            } else {
                break;
            }
        }
    }

    return {
        نوع: "اذا",
        الشروط,
        القيم,
        اواذا_القيم,
        شروط_اواذا,
        والا: والا_القيم,
    };
}

export function منشئ_اذا(مستوى, عداد, عقدة, داخل_برنامج) {
    const الشرط = عقدة.الشروط
        .map((ش) => إنشاء_الشفرة(ش, مستوى, عداد, داخل_برنامج))
        .join(" && ");

    const القيم = عقدة.القيم
        .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
        .join("\n");

    let كود = `if (${الشرط}) {\n${القيم}\n}`;

    if (عقدة.اواذا_القيم) {
        const شروط_اواذا = عقدة.شروط_اواذا
            .map((ش) => إنشاء_الشفرة(ش, مستوى, عداد, داخل_برنامج))
            .join(" && ");

        const اواذا_القيم = عقدة.اواذا_القيم
            .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
            .join("\n");
        كود += ` else if (${شروط_اواذا}) {\n${اواذا_القيم}\n}`;
    }

    if (عقدة.والا) {
        const والا_القيم = عقدة.والا
            .map((ج) => إنشاء_الشفرة(ج, مستوى + 1, عداد, داخل_برنامج))
            .join("\n");
        كود += ` else {\n${والا_القيم}\n}`;
    }

    return كود;
}
