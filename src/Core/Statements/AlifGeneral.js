import { احصل, التالي, تحقق, تطابق } from "../TokenUtils.js";
import { محلل_التعبير } from "../Expressions.js";
import { إنشاء_الشفرة } from "../../AlifGenerator.js";
import { رمي_خطأ } from "../AlifErrors.js";

export function محلل_عام_للاقواس(الرموز, الدالة_الام, الكلمة) {
    تطابق(الرموز, "كلمة", الكلمة);
    تطابق(الرموز, "اقواس", "(");

    let قيم = [];
    while (true) {
        // اضف القيمة
        const قيمة = محلل_التعبير(الرموز, الدالة_الام);
        if (!قيمة) break;
        قيم.push(قيمة);

        // تخطي المسافات والاسطر الفارغة
        while (تحقق(الرموز, "مسافة")) التالي(الرموز);

        // اذا لا يوجد فاصلة توقف
        if (تحقق(الرموز, "فاصلة")) {
            قيم.push({ نوع: "فاصلة", قيمة: ", " });
            التالي(الرموز);
        }
    }
    if (!تطابق(الرموز, "اقواس", ")"))
        رمي_خطأ(`لم يتم اغلاق القوس ")" بعد "${الكلمة}"`, الرموز, الدالة_الام);
    return { نوع: الكلمة, قيم };
}

export function منشئ_عام_للاقواس(
    مستوى,
    عقدة,
    الامر,
    { عداد_مصوفة = false, اضافة = "", هل_مصفوفة = false } = {}
) {
    const vals = عقدة.قيم.map((v) =>
        v.نوع == "فاصلة" ? v.قيمة : إنشاء_الشفرة(v, مستوى)
    );
    const filtered = vals.filter((v) => v !== "0");

    let القيمة;
    if (عداد_مصوفة) القيمة = filtered.map((v) => v).join(", ");
    else القيمة = filtered.join("").replaceAll("هذا", "this");

    return `${الامر}(${
        هل_مصفوفة ? "JSON.stringify(" + القيمة + ")" : القيمة
    })${اضافة}`;
}

export function محلل_عام_للكلمات(الرموز, الدالة_الام, الكلمة) {
    تطابق(الرموز, "كلمة", الكلمة);
    return { نوع: الكلمة };
}

export function محلل_عام_للكلمات_بقيمة(الرموز, الدالة_الام, الكلمة) {
    if (!الرموز || !Array.isArray(الرموز)) {
        throw new Error(
            'الرموز غير معرفة أو غير صحيحة "محلل_عام_للكلمات_بقيمة" ' + الرموز
        );
    }

    تطابق(الرموز, "كلمة", الكلمة);
    if (الكلمة === "ارجع") {
        let قيم = [];
        while (!تحقق(الرموز, "سطر_جديد")) {
            قيم.push(محلل_التعبير(الرموز, الدالة_الام));

            while (تحقق(الرموز, "مسافة")) التالي(الرموز);

            if (تحقق(الرموز, "فاصلة")) {
                التالي(الرموز);

                while (تحقق(الرموز, "مسافة")) التالي(الرموز);
            } else break;
        }

        return { نوع: الكلمة, قيم };
    }
    let قيمة = محلل_التعبير(الرموز, الدالة_الام);

    return { نوع: الكلمة, قيمة };
}

export function محلل_عام_للاقواس_يسبقها_نقطة(
    الرموز,
    الدالة_الام,
    متغير,
    الكلمة
) {
    تطابق(الرموز, "كلمة", الكلمة);
    تطابق(الرموز, "اقواس", "(");

    let قيم = [];
    while (!تحقق(الرموز, "اقواس", ")")) {
        // اضف القيمة
        const قيمة = محلل_التعبير(الرموز, الدالة_الام);
        if (!قيمة) break; // توقف إذا لم نحصل على قيمة صالحة
        قيم.push(قيمة);

        // تخطي المسافات والاسطر الفارغة
        while (تحقق(الرموز, "مسافة")) التالي(الرموز);

        // اذا لا يوجد فاصلة توقف
        if (تحقق(الرموز, "فاصلة")) التالي(الرموز);
    }

    if (!تطابق(الرموز, "اقواس", ")"))
        رمي_خطأ(
            ` ي سشلم يتم اغلاق القوس ")" بعد "${الكلمة}"`,
            الرموز,
            الدالة_الام
        );
    return { نوع: الكلمة, قيم, المتغير: متغير };
}
