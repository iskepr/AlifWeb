import { التالي, تحقق, تطابق } from "../TokenUtils.js";
import { محلل_التعبير } from "../Expressions.js";
import { إنشاء_الشفرة } from "../../AlifGenerator.js";

export function محلل_عام_للاقواس(الرموز, الكلمة) {
    if (!الرموز || !Array.isArray(الرموز)) {
        throw new Error(
            'الرموز غير معرفة أو غير صحيحة "محلل_عام_للاقواس" ' + الرموز
        );
    }
    تطابق(الرموز, "كلمة", الكلمة);
    تطابق(الرموز, "اقواس", "(");

    let قيم = [];
    while (true) {
        // اضف القيمة
        const قيمة = محلل_التعبير(الرموز);
        if (!قيمة) break; // توقف إذا لم نحصل على قيمة صالحة
        قيم.push(قيمة);

        // تخطي المسافات والاسطر الفارغة
        while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
            التالي(الرموز);

        // اذا لا يوجد فاصلة توقف
        if (تحقق(الرموز, "فاصلة")) التالي(الرموز);
        else break;
    }
    تطابق(الرموز, "اقواس", ")");
    return { نوع: الكلمة, قيم };
}

export function محلل_عام_للكلمات(الرموز, الكلمة) {
    if (!الرموز || !Array.isArray(الرموز)) {
        throw new Error(
            'الرموز غير معرفة أو غير صحيحة "محلل_عام_للكلمات" ' + الرموز
        );
    }
    تطابق(الرموز, "كلمة", الكلمة);
    const قيمة = محلل_التعبير(الرموز);
    return { نوع: الكلمة, قيمة };
}

export function محلل_عام_للاقواس_يسبقها_نقطة(الرموز, الكلمة) {
    if (!الرموز || !Array.isArray(الرموز)) {
        throw new Error(
            'الرموز غير معرفة أو غير صحيحة "محلل_عام_للاقواس_يسبقها_نقطة" ' +
                الرموز
        );
    }
    let متغير = تطابق(الرموز, "معرف");
    تطابق(الرموز, "اقواس", ".");
    تطابق(الرموز, "كلمة", الكلمة);
    تطابق(الرموز, "اقواس", "(");
    let قيمة;
    if (الكلمة === "مفاتيح") {
        قيمة = "";
    } else {
        قيمة = محلل_التعبير(الرموز);
    }
    تطابق(الرموز, "اقواس", ")");
    return { نوع: الكلمة, قيمة, المتغير: متغير };
}

export function منشئ_عام_للاقواس(
    مستوى,
    عداد,
    دالة,
    { عداد_مصوفة = false, إضافة = "" } = {}
) {
    return (عقدة) => {
        const vals = عقدة.قيم.map((v) => إنشاء_الشفرة(v, مستوى, عداد));
        const filtered = vals.filter((v) => v !== "0");
        let args;
        if (عداد_مصوفة) {
            args = filtered
                .map((v) => (!isNaN(Number(v)) ? v : `...${v}`))
                .join(", ");
        } else {
            args = filtered.join(", ");
        }
        return `${دالة}(${args})${إضافة}`;
    };
}
