import { احصل, التالي, تحقق, تطابق } from "../TokenUtils.js";
import { محلل_التعبير } from "../Expressions.js";
import { محلل_الجملة } from "../../AlifParser.js";
import { إنشاء_الشفرة } from "../../AlifGenerator.js";

export function محلل_الواجهة_داخلي(الرموز, الكلمة) {
    تطابق(الرموز, "كلمة", الكلمة);

    // تخطي المسافات والأسطر الجديدة
    while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد")) التالي(الرموز);

    تطابق(الرموز, "اقواس", "(");
    const قيم = [];
    while (!تحقق(الرموز, "اقواس", ")")) {
        const قيمة = محلل_التعبير(الرموز);
        قيم.push({ القيمة: قيمة });

        while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
            التالي(الرموز);

        if (تحقق(الرموز, "فاصلة")) التالي(الرموز);
        else break;
    }
    تطابق(الرموز, "اقواس", ")");
    تطابق(الرموز, "نقطتان");

    const اوامر = [];
    while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
    if (!تحقق(الرموز, "مسافة")) {
        return { نوع: الكلمة, قيم, اوامر };
    }
    const التبويب = احصل(الرموز).القيمة.length;
    التالي(الرموز);
    اوامر.push(محلل_الجملة(الرموز));
    while (true) {
        while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
        if (!تحقق(الرموز, "مسافة") || احصل(الرموز).القيمة.length < التبويب)
            break;
        التالي(الرموز);
        اوامر.push(محلل_الجملة(الرموز));
    }

    return { نوع: الكلمة, قيم, اوامر };
}

export function محلل_الواجهة(الرموز, الكلمة) {
    تطابق(الرموز, "كلمة", الكلمة);
    تطابق(الرموز, "اقواس", "(");
    const قيم = [];
    // تخطي المسافات والاسطر الفارغة
    while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد")) التالي(الرموز);

    while (!تحقق(الرموز, "اقواس", ")")) {
        // تخطي المسافات والاسطر الفارغة
        while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
            التالي(الرموز);

        let المفتاح;
        if (تحقق(الرموز, "نص")) {
            const رمز_المفتاح = تطابق(الرموز, "نص");
            المفتاح = رمز_المفتاح.القيمة.slice(1, -1);
        } else if (تحقق(الرموز, "معرف")) {
            const رمز_المفتاح = تطابق(الرموز, "معرف");
            المفتاح = رمز_المفتاح.القيمة;
        } else {
            const error = new Error(`توقع مفتاح في فهرس قبل ":"`);
            error.line = `في السطر ` + احصل(الرموز)?.السطر;
            throw error;
        }
        تطابق(الرموز, "نقطتان");
        const القيمة = محلل_التعبير(الرموز);
        if (!القيمة) {
            const error = new Error(
                `خطأ في تحليل القيمة داخل الأقواس المتعرجة`
            );
            error.line = `في السطر ` + احصل(الرموز)?.السطر;
            throw error;
        }
        قيم.push({ المفتاح, القيمة });
        // اذا لا يوجد فاصلة التالي
        if (تحقق(الرموز, "فاصلة")) التالي(الرموز);
    }
    تطابق(الرموز, "اقواس", ")");

    if (تطابق(الرموز, "نقطتان")) {
        const اوامر = [];
        while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
        if (!تحقق(الرموز, "مسافة")) {
            return { نوع: الكلمة, قيم, اوامر };
        }
        const التبويب = احصل(الرموز).القيمة.length;
        التالي(الرموز);
        اوامر.push(محلل_الجملة(الرموز));
        while (true) {
            while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
            if (!تحقق(الرموز, "مسافة") || احصل(الرموز).القيمة.length < التبويب)
                break;
            التالي(الرموز);
            اوامر.push(محلل_الجملة(الرموز));
        }
        return { نوع: الكلمة, قيم, اوامر };
    }
    return { نوع: الكلمة, قيم };
}

export function منشئ_عام_الواجهة(عقدة, عداد, نوع = "div", التصميم) {
    عداد.قيمة++;
    const اسم = `عنصر${عداد.قيمة}`;
    const سطور = [`const ${اسم} = document.createElement("${نوع}");`];
    عقدة.قيم.forEach(({ المفتاح, القيمة }) => {
        const قيمة = القيمة.قيمة;
        if (!قيمة) return;
        switch (المفتاح) {
            case "النص":
                سطور.push(`${اسم}.innerHTML = ${قيمة};`);
                break;
            case "اللون":
                سطور.push(`${اسم}.style.color = ${قيمة};`);
                break;
            case "الرابط":
                سطور.push(`${اسم}.href = ${قيمة};`);
                break;
            case "التصميم":
                سطور.push(`${اسم}.style = ${قيمة};`);
                break;
            default:
                سطور.push(`${اسم}.setAttribute("${المفتاح}", ${قيمة});`);
        }
    });

    // إضافة التصميم
    if (التصميم) {
        سطور.push(`${اسم}.style = "${التصميم}";`);
    }

    if (عقدة.اوامر) {
        عقدة.اوامر.forEach((عنصر) => {
            const كود = إنشاء_الشفرة(عنصر, 0, عداد).replace(/__fragment/g, اسم);
            سطور.push(كود);
        });
    }
    سطور.push(`__fragment.appendChild(${اسم});`);
    return سطور.join("\n\t");
}
