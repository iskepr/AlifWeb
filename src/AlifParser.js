function محلل_الرموز(الرموز) {
    let المؤشر = 0;

    let احصل = () => الرموز[المؤشر];
    function التالي() {
        المؤشر++;
        return احصل();
    }
    function تحقق(النوع, القيمة = null) {
        const الرمز = احصل();
        if (!الرمز || الرمز.النوع !== النوع) return false;
        if (القيمة !== null && الرمز.القيمة !== القيمة) return false;
        return true;
    }
    function تطابق(النوع, القيمة = null) {
        if (تحقق(النوع, القيمة)) {
            const الرمز = احصل();
            التالي();
            return الرمز;
        }
        return null;
    }

    const المحللات = {
        اطبع: محلل_عام_للاقواس,
        ادخل: محلل_عام_للاقواس,
        طول: محلل_عام_للاقواس,
        اقصى: محلل_عام_للاقواس,
        ادنى: محلل_عام_للاقواس,
        اشعار: محلل_عام_للاقواس,
        صحيح: محلل_عام_للاقواس,
        عشري: محلل_عام_للاقواس,
        مصفوفة: محلل_عام_للاقواس,
        اضف: محلل_عام_للاقواس_يسبقها_نقطة,
        ادرج: محلل_عام_للاقواس_يسبقها_نقطة,
        امسح: محلل_عام_للاقواس_يسبقها_نقطة,
        مفاتيح: محلل_عام_للاقواس_يسبقها_نقطة,
        استمر: محلل_عام_للكلمات,
        توقف: محلل_عام_للكلمات,
        عام: محلل_عام_للكلمات,
        صح: محلل_عام_للكلمات,
        خطأ: محلل_عام_للكلمات,
        خطا: محلل_عام_للكلمات,
        عدم: محلل_عام_للكلمات,
        استورد: محلل_عام_للكلمات,
        ارجع: محلل_عام_للكلمات,
        لاجل: محلل_لاجل,
        متغير: محلل_متغير,
        دالة: محلل_دالة,
        اذا: محلل_اذا,
        // ===== Html
        نص: محلل_html,
        رابط: محلل_html,
    };

    function محلل_التعبير() {
        const الرمز = احصل();

        // لا يغير في النصوص والارقام والمُعرفات
        if (تحقق("رقم") || تحقق("نص") || تحقق("معرف"))
            // ==================
            return { نوع: "قيمة", قيمة: احصل().القيمة, رمز: التالي() };

        // لا اعلم
        if (تحقق("معرف")) return { نوع: "معرف", اسم: التالي().القيمة };

        // دعم امر داخل امر
        if (تحقق("كلمة")) {
            const الامر = احصل().القيمة;
            if (المحللات[الامر]) return المحللات[الامر](الامر);
        }

        // دعم القيم داخل اقواس مثلا: (5, 7, صح, "اهلا")
        if (تحقق("اقواس", "(")) {
            التالي();
            const قيم = [];
            while (!تحقق("اقواس", ")")) {
                // تخطي المسافات والاسطر الفارغة
                while (تحقق("مسافة") || تحقق("سطر_جديد")) التالي();

                const القيمة = محلل_التعبير();
                قيم.push(القيمة);
                // اذا لا يوجد فاصلة توقف
                if (تحقق("فاصلة")) التالي();
            }
            تطابق("اقواس", ")");
            return { نوع: "قائمة_اقواس", قيم };
        }
        // دعم القيم داخل اقواس مربعة مثلا: [5, 7, صح, "اهلا"]
        if (تحقق("اقواس", "[")) {
            التالي();
            const قيم = [];
            while (!تحقق("اقواس", "]")) {
                // تخطي المسافات والاسطر الفارغة
                while (تحقق("مسافة") || تحقق("سطر_جديد")) التالي();

                const القيمة = محلل_التعبير();
                قيم.push(القيمة);
                // اذا لا يوجد فاصلة توقف
                if (تحقق("فاصلة")) التالي();
            }
            تطابق("اقواس", "]");
            return { نوع: "قائمة", قيم };
        }
        // دعم القيم داخل اقواس متعرجة مثلا: {5, 7, صح, "اهلا"}
        if (تحقق("اقواس", "{")) {
            التالي();
            const خصائص = [];
            while (!تحقق("اقواس", "}")) {
                // تخطي المسافات والاسطر الفارغة
                while (تحقق("مسافة") || تحقق("سطر_جديد")) التالي();

                let المفتاح;
                if (تحقق("نص")) {
                    const رمز_المفتاح = تطابق("نص"); // استخدم تطابق بدل تحقق هنا
                    المفتاح = رمز_المفتاح.القيمة.slice(1, -1);
                } else if (تحقق("معرف")) {
                    const رمز_المفتاح = تطابق("معرف");
                    المفتاح = رمز_المفتاح.القيمة;
                } else {
                    throw new Error(
                        `توقع مفتاح في الكائن عند السطر ${احصل()?.سطر}`
                    );
                }
                تطابق("رمز_حسابي", ":");
                const القيمة = محلل_التعبير();
                خصائص.push({ المفتاح, القيمة });
                // اذا لا يوجد فاصلة توقف
                if (تحقق("فاصلة")) التالي();
            }

            تطابق("اقواس", "}");
            return { نوع: "كائن", خصائص };
        }

        console.warn(`تحذير: تعبير غير مفهوم عند السطر ${الرمز?.السطر}`);
    }

    function محلل_الجملة() {
        const الامر = احصل()?.القيمة;
        if (الامر && المحللات[الامر]) return المحللات[الامر](الامر);

        const متغير = محلل_متغير();
        if (متغير) return متغير;

        const رمز = احصل();
        console.error(`جملة غير مفهومة عند السطر ${رمز?.سطر}:`, رمز);
        التالي(); // عشان يتخطى الرمز الغريب
        return { نوع: "غير_معروف", رمز };
    }

    function محلل_عام_للكلمات(الكلمة) {
        تطابق("كلمة", الكلمة);
        const قيمة = محلل_التعبير();
        return { نوع: الكلمة, قيمة };
    }
    function محلل_عام_للاقواس(الكلمة) {
        تطابق("كلمة", الكلمة);
        تطابق("اقواس", "(");
        const قيمة = محلل_التعبير();
        تطابق("اقواس", ")");
        return { نوع: الكلمة, قيمة };
    }
    function محلل_عام_للاقواس_يسبقها_نقطة(الكلمة) {
        let متغير = تطابق("معرف");
        تطابق("اقواس", ".");
        تطابق("كلمة", الكلمة);
        تطابق("اقواس", "(");
        let قيمة;
        if (الكلمة === "مفاتيح") {
            قيمة = "";
        } else {
            قيمة = محلل_التعبير();
        }
        تطابق("اقواس", ")");
        return { نوع: الكلمة, قيمة, المتغير: متغير };
    }

    function محلل_متغير() {
        const معرف = تطابق("معرف");
        if (معرف && تحقق("علامة_إسناد", "=")) {
            تطابق("علامة_إسناد", "=");
            const قيمة = محلل_التعبير();
            return { نوع: "متغير", اسم: معرف.القيمة, قيمة };
        }
        if (معرف) المؤشر--;
        return null;
    }
    function محلل_لاجل() {
        تطابق("كلمة", "لاجل");
        // تخطي المسافات والاسطر الفارغة
        while (تحقق("مسافة") || تحقق("سطر_جديد")) التالي();

        const معرف_متغير = تطابق("معرف");
        if (!معرف_متغير) throw new Error("يجب تحديد اسم متغير بعد لاجل");
        const المتغير = { نوع: "معرف", اسم: معرف_متغير.القيمة };
        تطابق("كلمة", "في");
        تطابق("كلمة", "مدى");
        التالي();
        تطابق("اقواس", "(");
        const الحد = محلل_التعبير();
        تطابق("اقواس", ")");
        if (!تطابق("رمز_حسابي", ":")) {
            console.error(`توقعت ":" بعد تعريف لاجل`);
        }

        // ما بداخل العجلة
        let القيم = [];
        while (true) {
            if (!تطابق("سطر_جديد")) {
                console.error(`توقعت مسافة بعد تعريف لاجل`);
            }
            if (!تطابق("مسافة")) {
                console.error(`توقعت مسافة بعد تعريف لاجل`);
                break;
            }
            const القيمة = محلل_التعبير();
            القيم.push(القيمة);
            console.log(القيم);
        }

        return { نوع: "لاجل", المتغير, الحد, القيم };
    }
    function محلل_دالة() {
        تطابق("كلمة", "دالة");

        const الاسم = تطابق("معرف");
        if (!الاسم) throw new Error("يجب تحديد اسم للدالة");

        تطابق("اقواس", "(");
        const المعاملات = [];
        while (!تحقق("اقواس", ")")) {
            const معرف = تطابق("معرف");
            if (معرف) المعاملات.push(معرف.القيمة);
            if (تحقق("فاصلة")) التالي();
        }
        تطابق("اقواس", ")");

        if (!تطابق("رمز_حسابي", ":")) {
            console.error(`توقعت ":" بعد تعريف الدالة`);
        }

        const جسم = [];
        while (
            الموشر < رموز.length &&
            !تحقق("كلمة", "دالة") &&
            !تحقق("كلمة", "نهاية")
        ) {
            if (تحقق("سطر_جديد")) {
                التالي();
                continue;
            }
            جسم.push(محلل_الجملة());
        }

        return {
            نوع: "دالة",
            اسم: الاسم.القيمة,
            معاملات: المعاملات,
            جسم: جسم,
        };
    }
    function محلل_اذا() {
        تطابق("كلمة", "اذا");
        const شرط = محلل_التعبير();
        تطابق("اقواس", ":");

        const جسم = [];
        while (!تحقق("كلمة", "والا") && الموشر < رموز.length) {
            if (تحقق("سطر_جديد")) {
                التالي();
                continue;
            }
            جسم.push(محلل_الجملة());
        }

        let والا_جسم = null;
        if (تطابق("كلمة", "والا")) {
            تطابق("اقواس", ":");
            والا_جسم = [];
            while (تحقق("سطر_جديد")) التالي();
            while (موشر < رموز.length && !تحقق("كلمة", "اذا")) {
                if (تحقق("سطر_جديد")) {
                    التالي();
                    continue;
                }
                والا_جسم.push(محلل_الجملة());
            }
        }

        return { نوع: "اذا", شرط, جسم, والا: والا_جسم };
    }

    // ===== Html
    function محلل_html(الكلمة) {
        تطابق("كلمة", الكلمة);
        تطابق("اقواس", "(");
        const قيم = [];

        // تخطي المسافات والاسطر الفارغة
        while (تحقق("مسافة") || تحقق("سطر_جديد")) التالي();

        while (true) {
            // اضف القيمة
            const قيمة = محلل_التعبير();
            قيم.push({ القيمة: قيمة });

            // تخطي المسافات والاسطر الفارغة
            while (تحقق("مسافة") || تحقق("سطر_جديد")) التالي();

            // اذا لا يوجد فاصلة توقف
            if (تحقق("فاصلة")) التالي();
            else break;
        }

        تطابق("اقواس", ")");
        return { نوع: الكلمة, قيم };
    }

    function ابدأ() {
        const جمل = [];
        while (المؤشر < الرموز.length) {
            if (تحقق("سطر_جديد")) {
                التالي();
                continue;
            }
            جمل.push(محلل_الجملة());
        }
        return { نوع: "برنامج", جمل };
    }
    return ابدأ();
}

module.exports = { محلل_الرموز };
