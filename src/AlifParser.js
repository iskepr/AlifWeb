function محلل_الرموز(الرموز) {
    let المؤشر = 0;

    let احصل = () => الرموز[المؤشر];
    function التالي() {
        المؤشر++;
        return احصل();
    }
    function تحقق(النوع, القيمة = null) {
        const الرمز = احصل();
        if (!الرمز || الرمز.النوع !== النوع) return false;
        if (القيمة !== null && الرمز.القيمة !== القيمة) return false;
        return true;
    }
    function تطابق(النوع, القيمة = null) {
        if (تحقق(النوع, القيمة)) {
            const الرمز = احصل();
            التالي();
            return الرمز;
        }
        return null;
    }

    const المحللات = {
        اطبع: محلل_عام_للاقواس,
        ادخل: محلل_عام_للاقواس,
        طول: محلل_عام_للاقواس,
        اقصى: محلل_عام_للاقواس,
        ادنى: محلل_عام_للاقواس,
        اشعار: محلل_عام_للاقواس,
        صحيح: محلل_عام_للاقواس,
        عشري: محلل_عام_للاقواس,
        مصفوفة: محلل_عام_للاقواس,
        اضف: محلل_عام_للاقواس_يسبقها_نقطة,
        ادرج: محلل_عام_للاقواس_يسبقها_نقطة,
        امسح: محلل_عام_للاقواس_يسبقها_نقطة,
        مفاتيح: محلل_عام_للاقواس_يسبقها_نقطة,
        استمر: محلل_عام_للكلمات,
        توقف: محلل_عام_للكلمات,
        عام: محلل_عام_للكلمات,
        عدم: محلل_عام_للكلمات,
        استورد: محلل_عام_للكلمات,
        ارجع: محلل_عام_للكلمات,
        لاجل: محلل_لاجل,
        لأجل: محلل_لاجل,
        بينما: محلل_بينما,
        متغير: محلل_متغير,
        دالة: محلل_دالة,
        اذا: محلل_اذا,
        إذا: محلل_اذا,
        // ===== Html
        نص: محلل_html,
        رابط: محلل_html,
        عمودي: محلل_html_داخلي,
        رأسي: محلل_html_داخلي,
    };

    function محلل_التعبير() {
        const الرمز = احصل();

        // لا يغير في النصوص والارقام والمُعرفات
        if (تحقق("رقم") || تحقق("نص") || تحقق("معرف"))
            return { نوع: "قيمة", قيمة: احصل().القيمة, رمز: التالي() };

        const قيم = {
            صح: { نوع: "صح", قيمة: true },
            خطأ: { نوع: "خطأ", قيمة: false },
            خطا: { نوع: "خطأ", قيمة: false },
            عدم: { نوع: "عدم", قيمة: null },
        };
        if (تحقق("كلمة") && قيم[الرمز.القيمة]) {
            التالي();
            return قيم[الرمز.القيمة];
        }

        // دعم امر داخل امر
        if (تحقق("كلمة")) {
            const الامر = احصل().القيمة;
            if (المحللات[الامر]) return المحللات[الامر](الامر);
        }

        // دعم القيم داخل اقواس مثلا: (5, 7, صح, "اهلا")
        if (تحقق("اقواس", "(")) {
            التالي();
            const قيم = [];
            while (!تحقق("اقواس", ")")) {
                // تخطي المسافات والاسطر الفارغة
                while (تحقق("مسافة") || تحقق("سطر_جديد")) التالي();

                const القيمة = محلل_التعبير();
                قيم.push(القيمة);
                // اذا لا يوجد فاصلة توقف
                if (تحقق("فاصلة")) التالي();
            }
            تطابق("اقواس", ")");
            return { نوع: "قائمة_اقواس", قيم };
        }
        // دعم القيم داخل اقواس مربعة مثلا: [5, 7, صح, "اهلا"]
        if (تحقق("اقواس", "[")) {
            التالي();
            const قيم = [];
            while (!تحقق("اقواس", "]")) {
                // تخطي المسافات والاسطر الفارغة
                while (تحقق("مسافة") || تحقق("سطر_جديد")) التالي();

                const القيمة = محلل_التعبير();
                قيم.push(القيمة);
                // اذا لا يوجد فاصلة توقف
                if (تحقق("فاصلة")) التالي();
            }
            تطابق("اقواس", "]");
            return { نوع: "قائمة", قيم };
        }
        // دعم القيم داخل اقواس متعرجة مثلا: {5, 7, صح, "اهلا"}
        if (تحقق("اقواس", "{")) {
            التالي();
            const خصائص = [];
            while (!تحقق("اقواس", "}")) {
                // تخطي المسافات والاسطر الفارغة
                while (تحقق("مسافة") || تحقق("سطر_جديد")) التالي();

                let المفتاح;
                if (تحقق("نص")) {
                    const رمز_المفتاح = تطابق("نص"); // استخدم تطابق بدل تحقق هنا
                    المفتاح = رمز_المفتاح.القيمة.slice(1, -1);
                } else if (تحقق("معرف")) {
                    const رمز_المفتاح = تطابق("معرف");
                    المفتاح = رمز_المفتاح.القيمة;
                } else {
                    throw new Error(
                        `توقع مفتاح في الكائن عند السطر ${احصل()?.سطر}`
                    );
                }
                تطابق("رمز_حسابي", ":");
                const القيمة = محلل_التعبير();
                خصائص.push({ المفتاح, القيمة });
                // اذا لا يوجد فاصلة توقف
                if (تحقق("فاصلة")) التالي();
            }

            تطابق("اقواس", "}");
            return { نوع: "كائن", خصائص };
        }

        console.warn(`تحذير: تعبير غير مفهوم عند السطر `, الرمز?.السطر);
    }

    function محلل_الجملة() {
        const الامر = احصل()?.القيمة;
        if (الامر && المحللات[الامر]) return المحللات[الامر](الامر);

        const متغير = محلل_متغير();
        if (متغير) return متغير;

        const رمز = احصل();
        console.error(`جملة غير مفهومة عند السطر ${رمز?.سطر}:`, رمز);
        التالي(); // عشان يتخطى الرمز الغريب
        return { نوع: "غير_معروف", رمز };
    }

    function محلل_عام_للكلمات(الكلمة) {
        تطابق("كلمة", الكلمة);
        const قيمة = محلل_التعبير();
        return { نوع: الكلمة, قيمة };
    }
    function محلل_عام_للاقواس(الكلمة) {
        تطابق("كلمة", الكلمة);
        تطابق("اقواس", "(");
        const قيمة = محلل_التعبير();
        تطابق("اقواس", ")");
        return { نوع: الكلمة, قيمة };
    }
    function محلل_عام_للاقواس_يسبقها_نقطة(الكلمة) {
        let متغير = تطابق("معرف");
        تطابق("اقواس", ".");
        تطابق("كلمة", الكلمة);
        تطابق("اقواس", "(");
        let قيمة;
        if (الكلمة === "مفاتيح") {
            قيمة = "";
        } else {
            قيمة = محلل_التعبير();
        }
        تطابق("اقواس", ")");
        return { نوع: الكلمة, قيمة, المتغير: متغير };
    }

    function محلل_متغير() {
        const معرف = تطابق("معرف");
        if (معرف && تحقق("علامة_إسناد", "=")) {
            تطابق("علامة_إسناد", "=");
            const قيمة = محلل_التعبير();
            return { نوع: "متغير", اسم: معرف.القيمة, قيمة };
        }
        if (معرف) المؤشر--;
        return null;
    }
    function محلل_لاجل() {
        تطابق("كلمة", "لاجل") || تطابق("كلمة", "لأجل");
        // تخطي المسافات والاسطر الفارغة
        while (تحقق("مسافة") || تحقق("سطر_جديد")) التالي();

        const معرف_متغير = تطابق("معرف");
        if (!معرف_متغير) throw new Error("يجب تحديد اسم متغير بعد لاجل");
        const المتغير = { نوع: "معرف", اسم: معرف_متغير.القيمة };
        تطابق("كلمة", "في");
        تطابق("كلمة", "مدى");
        التالي();
        تطابق("اقواس", "(");
        const الحد = محلل_التعبير();
        تطابق("اقواس", ")");
        if (!تطابق("رمز_حسابي", ":")) console.error(`توقعت ":" بعد تعريف لاجل`);

        // ما بداخل العجلة
        let القيم = [];
        while (true) {
            if (!تطابق("سطر_جديد")) console.error(`توقعت مسافة بعد تعريف لاجل`);
            if (!تطابق("مسافة")) break;
            const القيمة = محلل_الجملة();
            القيم.push(القيمة);
        }

        return { نوع: "لاجل", المتغير, الحد, القيم };
    }
    function محلل_بينما() {
        تطابق("كلمة", "بينما");
        // تخطي المسافات والاسطر الفارغة
        while (تحقق("مسافة") || تحقق("سطر_جديد")) التالي();

        // الشروط
        let الشروط = [];
        while (true) {
            const القيمة = محلل_التعبير();
            الشروط.push(القيمة);
            if (تطابق("رمز_حسابي", ":")) break;
        }

        // ما بداخل بينما
        let القيم = [];
        while (true) {
            if (!تطابق("سطر_جديد"))
                console.error(`توقعت سطر_جديد بعد تعريف بينما`);

            if (!تطابق("مسافة")) break;

            const القيمة = محلل_الجملة();
            القيم.push(القيمة);
        }

        return { نوع: "بينما", الشروط, القيم };
    }

    function محلل_دالة() {
        تطابق("كلمة", "دالة");

        const الاسم = تطابق("معرف");
        if (!الاسم) throw new Error("يجب تحديد اسم للدالة");

        تطابق("اقواس", "(");
        const المعاملات = [];
        while (!تحقق("اقواس", ")")) {
            const معرف = تطابق("معرف");
            if (معرف) المعاملات.push(معرف.القيمة);
            if (تحقق("فاصلة")) التالي();
        }
        تطابق("اقواس", ")");

        if (!تطابق("رمز_حسابي", ":")) {
            console.error(`توقعت ":" بعد تعريف الدالة`);
        }

        const جسم = [];
        while (
            المؤشر < رموز.length &&
            !تحقق("كلمة", "دالة") &&
            !تحقق("كلمة", "نهاية")
        ) {
            if (تحقق("سطر_جديد")) {
                التالي();
                continue;
            }
            جسم.push(محلل_الجملة());
        }

        return {
            نوع: "دالة",
            اسم: الاسم.القيمة,
            معاملات: المعاملات,
            جسم: جسم,
        };
    }
    function محلل_اذا() {
        تطابق("كلمة", "اذا") || تطابق("كلمة", "إذا");
        // تخطي المسافات والأسطر الفارغة
        while (تحقق("مسافة") || تحقق("سطر_جديد")) التالي();

        // الشروط
        let الشروط = [];
        while (true) {
            const القيمة = محلل_التعبير();
            الشروط.push(القيمة);
            if (تطابق("رمز_حسابي", ":")) break;
        }

        // جسم if
        const جسم = [];
        while (
            المؤشر < الرموز.length &&
            !تحقق("كلمة", "والا") &&
            !تحقق("كلمة", "اذا")
        ) {
            while (تحقق("سطر_جديد")) التالي();
            if (تحقق("مسافة")) {
                التالي();
                جسم.push(محلل_الجملة());
            } else {
                break;
            }
        }

        // جسم اواذا (اختياري)
        let اواذا_جسم = [];
        let شروط_اواذا = [];
        if (تطابق("كلمة", "اواذا") || تحقق("كلمة", "اوإذا")) {
            // الشروط
            while (true) {
                const القيمة = محلل_التعبير();
                شروط_اواذا.push(القيمة);
                if (تطابق("رمز_حسابي", ":")) break;
            }
            تطابق("رمز_حسابي", ":");
            while (المؤشر < الرموز.length && !تحقق("كلمة", "اذا")) {
                while (تحقق("سطر_جديد")) التالي();
                if (تحقق("مسافة")) {
                    التالي();
                    اواذا_جسم.push(محلل_الجملة());
                } else {
                    break;
                }
            }
        }

        // جسم والا (اختياري)
        let والا_جسم = [];
        if (تطابق("كلمة", "والا") || تحقق("كلمة", "وإلا")) {
            تطابق("رمز_حسابي", ":");
            while (المؤشر < الرموز.length && !تحقق("كلمة", "اذا")) {
                while (تحقق("سطر_جديد")) التالي();
                if (تحقق("مسافة")) {
                    التالي();
                    والا_جسم.push(محلل_الجملة());
                } else {
                    break;
                }
            }
        }

        return {
            نوع: "اذا",
            الشروط,
            جسم,
            اواذا_جسم,
            شروط_اواذا,
            والا: والا_جسم,
        };
    }

    // ===== Html
    function محلل_html(الكلمة) {
        تطابق("كلمة", الكلمة);
        تطابق("اقواس", "(");
        const قيم = [];

        // تخطي المسافات والاسطر الفارغة
        while (تحقق("مسافة") || تحقق("سطر_جديد")) التالي();

        while (true) {
            // اضف القيمة
            const قيمة = محلل_التعبير();
            قيم.push({ القيمة: قيمة });

            // تخطي المسافات والاسطر الفارغة
            while (تحقق("مسافة") || تحقق("سطر_جديد")) التالي();

            // اذا لا يوجد فاصلة توقف
            if (تحقق("فاصلة")) التالي();
            else break;
        }

        تطابق("اقواس", ")");
        return { نوع: الكلمة, قيم };
    }
    function محلل_html_داخلي(الكلمة) {
        تطابق("كلمة", الكلمة);
    
        // تخطي المسافات والأسطر الجديدة
        while (تحقق("مسافة") || تحقق("سطر_جديد")) التالي();
    
        تطابق("اقواس", "(");
        const قيم = [];
        while (!تحقق("اقواس", ")")) {
            const قيمة = محلل_التعبير();
            قيم.push({ القيمة: قيمة });
    
            while (تحقق("مسافة") || تحقق("سطر_جديد")) التالي();
    
            if (تحقق("فاصلة")) التالي();
            else break;
        }
        تطابق("اقواس", ")");
        تطابق("رمز_حسابي", ":");
    
        const اوامر = [];
        while (true) {
            while (تحقق("سطر_جديد")) التالي();
    
            if (!تحقق("مسافة")) break;
            التالي(); // تخطي المسافة
    
            اوامر.push(محلل_الجملة());
        }
    
        return { نوع: الكلمة, قيم, اوامر };
    }
    

    function ابدأ() {
        const جمل = [];
        while (المؤشر < الرموز.length) {
            if (تحقق("سطر_جديد")) {
                التالي();
                continue;
            }
            جمل.push(محلل_الجملة());
        }
        return { نوع: "برنامج", جمل };
    }
    return ابدأ();
}

module.exports = { محلل_الرموز };
