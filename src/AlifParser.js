import { احصل, التالي, تحقق, تطابق, المؤشر } from "./Core/TokenUtils.js";

export function محلل_الرموز(الرموز) {
    const المحللات = {
        اطبع: محلل_عام_للاقواس,
        ادخل: محلل_عام_للاقواس,
        طول: محلل_عام_للاقواس,
        اقصى: محلل_عام_للاقواس,
        ادنى: محلل_عام_للاقواس,
        اشعار: محلل_عام_للاقواس,
        صحيح: محلل_عام_للاقواس,
        عشري: محلل_عام_للاقواس,
        مصفوفة: محلل_عام_للاقواس,
        // جلب: محلل_عام_للاقواس,
        اضف: محلل_عام_للاقواس_يسبقها_نقطة,
        ادرج: محلل_عام_للاقواس_يسبقها_نقطة,
        امسح: محلل_عام_للاقواس_يسبقها_نقطة,
        مفاتيح: محلل_عام_للاقواس_يسبقها_نقطة,
        استمر: محلل_عام_للكلمات,
        توقف: محلل_عام_للكلمات,
        عام: محلل_عام_للكلمات,
        عدم: محلل_عام_للكلمات,
        استورد: محلل_عام_للكلمات,
        ارجع: محلل_عام_للكلمات,
        احذف: محلل_عام_للكلمات,
        صح: محلل_عام_للكلمات,
        خطا: محلل_عام_للكلمات,
        خطأ: محلل_عام_للكلمات,
        عدم: محلل_عام_للكلمات,
        أو: محلل_عام_للكلمات,
        او: محلل_عام_للكلمات,
        و: محلل_عام_للكلمات,
        لاجل: محلل_لاجل,
        لأجل: محلل_لاجل,
        بينما: محلل_بينما,
        متغير: محلل_متغير,
        دالة: محلل_دالة,
        اذا: محلل_اذا,
        إذا: محلل_اذا,
        // ===== الواجه
        نص: محلل_الواجه,
        رابط: محلل_الواجه,
        عمودي: محلل_الواجه_داخلي,
        رأسي: محلل_الواجه_داخلي,
        توسيط: محلل_الواجه_داخلي,
        بطاقة: محلل_الواجه_داخلي,
        صفحة: محلل_الواجه_داخلي,
    };

    function محلل_التعبير() {
        const الرمز = احصل(الرموز);

        // دعم التعابير: المعرف مع دعم الفهرس المربع
        if (تحقق(الرموز, "معرف")) {
            const identToken = تطابق(الرموز, "معرف");
            let node = { نوع: "معرف", اسم: identToken.القيمة, رمز: identToken };
            // دعم الفهرس بواسطة اقواس مربعة
            while (تحقق(الرموز, "اقواس", "[")) {
                تطابق(الرموز, "اقواس", "[");
                // تخطي المسافات والأسطر الفارغة
                while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
                    التالي(الرموز);
                const indexExpr = محلل_التعبير();
                تطابق(الرموز, "اقواس", "]");
                node = { نوع: "فهرس_عنصر", list: node, index: indexExpr };
            }
            return node;
        }
        // لا يغير في الارقام والنصوص
        if (تحقق(الرموز, "رقم") || تحقق(الرموز, "نص")) {
            let القيمة = احصل(الرموز)?.القيمة;
            if (القيمة.startsWith('م"')) {
                const النص = القيمة;
                const محتوى = النص.slice(2, -1);
                const بعد_التحويل = محتوى.replace(/{([^}]+)}/g, "${$1}");
                القيمة = "`" + بعد_التحويل + "`";
            }
            const token = التالي(الرموز);
            return { نوع: "قيمة", قيمة: القيمة, رمز: token };
        }

        const قيم = {
            صح: { نوع: "صح", قيمة: true },
            خطأ: { نوع: "خطأ", قيمة: false },
            خطا: { نوع: "خطأ", قيمة: false },
            عدم: { نوع: "عدم", قيمة: null },
            أو: { نوع: "أو", قيمة: "||" },
            او: { نوع: "أو", قيمة: "||" },
            و: { نوع: "و", قيمة: "&&" },
        };
        if (تحقق(الرموز, "كلمة") && قيم[الرمز.القيمة]) {
            التالي(الرموز);
            return قيم[الرمز.القيمة];
        }

        // دعم امر داخل امر
        if (تحقق(الرموز, "كلمة")) {
            const الامر = احصل(الرموز)?.القيمة;
            if (المحللات[الامر]) return المحللات[الامر](الامر);
        }

        // دعم القيم داخل اقواس مثلا: (5, 7, صح, "اهلا")
        if (تحقق(الرموز, "اقواس", "(")) {
            التالي(الرموز);
            const قيم = [];
            while (!تحقق(الرموز, "اقواس", ")")) {
                // تخطي المسافات والاسطر الفارغة
                while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
                    التالي(الرموز);

                const القيمة = محلل_التعبير();
                قيم.push(القيمة);
                // اذا لا يوجد فاصلة توقف
                if (تحقق(الرموز, "فاصلة")) التالي(الرموز);
            }
            تطابق(الرموز, "اقواس", ")");
            return { نوع: "قائمة_اقواس", قيم };
        }
        // دعم القيم داخل اقواس مربعة مثلا: [5, 7, صح, "اهلا"]
        if (تحقق(الرموز, "اقواس", "[")) {
            التالي(الرموز);
            const قيم = [];
            while (!تحقق(الرموز, "اقواس", "]")) {
                // تخطي المسافات والاسطر الفارغة
                while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
                    التالي(الرموز);

                const القيمة = محلل_التعبير();
                قيم.push(القيمة);
                // اذا لا يوجد فاصلة توقف
                if (تحقق(الرموز, "فاصلة")) التالي(الرموز);
            }
            تطابق(الرموز, "اقواس", "]");
            return { نوع: "قائمة", قيم };
        }
        // دعم القيم داخل اقواس متعرجة مثلا: {5, 7, صح, "اهلا"}
        if (تحقق(الرموز, "اقواس", "{")) {
            التالي(الرموز);
            const خصائص = [];
            while (!تحقق(الرموز, "اقواس", "}")) {
                // تخطي المسافات والاسطر الفارغة
                while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
                    التالي(الرموز);

                let المفتاح;
                if (تحقق(الرموز, "نص")) {
                    const رمز_المفتاح = تطابق(الرموز, "نص");
                    المفتاح = رمز_المفتاح.القيمة.slice(1, -1);
                } else if (تحقق(الرموز, "معرف")) {
                    const رمز_المفتاح = تطابق(الرموز, "معرف");
                    المفتاح = رمز_المفتاح.القيمة;
                } else {
                    const error = new Error(`توقع مفتاح في فهرس قبل ":"`);
                    error.line = `في السطر ` + احصل(الرموز)?.السطر;
                    throw error;
                }
                تطابق(الرموز, "رمز_حسابي", ":");
                const القيمة = محلل_التعبير();
                خصائص.push({ المفتاح, القيمة });
                // اذا لا يوجد فاصلة توقف
                if (تحقق(الرموز, "فاصلة")) التالي(الرموز);
            }

            تطابق(الرموز, "اقواس", "}");
            return { نوع: "فهرس", خصائص };
        }

        console.warn(`تحذير: تعبير غير مفهوم في السطر ` + الرمز.السطر);
    }

    function محلل_الجملة() {
        const الامر = احصل(الرموز)?.القيمة;
        if (الامر && المحللات[الامر]) return المحللات[الامر](الامر);

        const متغير = محلل_متغير();
        if (متغير) return متغير;

        const رمز = احصل(الرموز);
        التالي(الرموز); // عشان يتخطى الرمز الغريب
        return { نوع: "غير_معروف", رمز };
    }

    function محلل_عام_للكلمات(الكلمة) {
        تطابق(الرموز, "كلمة", الكلمة);
        const قيمة = محلل_التعبير();
        return { نوع: الكلمة, قيمة };
    }
    function محلل_عام_للاقواس(الكلمة) {
        تطابق(الرموز, "كلمة", الكلمة);
        تطابق(الرموز, "اقواس", "(");

        let قيم = [];
        while (true) {
            // اضف القيمة
            const قيمة = محلل_التعبير();
            قيم.push(قيمة);

            // تخطي المسافات والاسطر الفارغة
            while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
                التالي(الرموز);

            // اذا لا يوجد فاصلة توقف
            if (تحقق(الرموز, "فاصلة")) التالي(الرموز);
            else break;
        }
        تطابق(الرموز, "اقواس", ")");
        return { نوع: الكلمة, قيم };
    }
    function محلل_عام_للاقواس_يسبقها_نقطة(الكلمة) {
        let متغير = تطابق(الرموز, "معرف");
        تطابق(الرموز, "اقواس", ".");
        تطابق(الرموز, "كلمة", الكلمة);
        تطابق(الرموز, "اقواس", "(");
        let قيمة;
        if (الكلمة === "مفاتيح") {
            قيمة = "";
        } else {
            قيمة = محلل_التعبير();
        }
        تطابق(الرموز, "اقواس", ")");
        return { نوع: الكلمة, قيمة, المتغير: متغير };
    }

    function محلل_متغير() {
        // دعم المتغيرات المتعددة مثل: س,ص = 7, 9
        const البداية = المؤشر;
        const أول = تطابق(الرموز, "معرف");
        if (!أول) return null;
        const أسماء = [أول.القيمة];
        // جمع أي معرفات إضافية مفصولة بفاصلة
        while (تحقق(الرموز, "فاصلة")) {
            تطابق(الرموز, "فاصلة");
            const t = تطابق(الرموز, "معرف");
            if (!t) {
                const error = new Error(`لا يوجد اسم متغير بعد الفاصلة`);
                error.line = `في السطر ` + احصل(الرموز).السطر;
                throw error;
            }
            أسماء.push(t.القيمة);
        }
        // تحقق من وجود علامة الإسناد
        if (تحقق(الرموز, "علامة_إسناد", "=")) {
            تطابق(الرموز, "علامة_إسناد", "=");
            const قيم = [];
            قيم.push(محلل_التعبير());
            // جمع أي قيم إضافية مفصولة بفاصلة
            while (تحقق(الرموز, "فاصلة")) {
                تطابق(الرموز, "فاصلة");
                قيم.push(محلل_التعبير());
            }
            // إذا كان تعيين واحد فقط
            if (أسماء.length === 1 && قيم.length === 1) {
                return { نوع: "متغير", اسم: أسماء[0], قيمة: قيم[0] };
            }
            // تعيين متعدد
            return { نوع: "متغير_مجمع", أسماء, قيم };
        }
        // لا يوجد إسناد، أعد المؤشر
        المؤشر = البداية;
        return null;
    }
    function محلل_لاجل() {
        تطابق(الرموز, "كلمة", "لاجل") || تطابق(الرموز, "كلمة", "لأجل");
        // تخطي المسافات والاسطر الفارغة
        while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
            التالي(الرموز);

        const معرف_متغير = تطابق(الرموز, "معرف");
        if (!معرف_متغير) {
            const error = new Error(`يجب تحديد اسم متغير بعد لاجل`);
            error.line = `في السطر ` + احصل(الرموز).السطر;
            throw error;
        }
        const المتغير = { نوع: "معرف", اسم: معرف_متغير.القيمة };
        تطابق(الرموز, "كلمة", "في");
        تطابق(الرموز, "كلمة", "مدى");
        التالي(الرموز);
        تطابق(الرموز, "اقواس", "(");
        const الحد = محلل_التعبير();
        تطابق(الرموز, "اقواس", ")");
        if (!تطابق(الرموز, "رمز_حسابي", ":"))
            console.error(`توقعت ":" بعد تعريف لاجل`);

        // ما بداخل العجلة
        const القيم = [];
        while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
        if (!تحقق(الرموز, "مسافة")) {
            return { نوع: الكلمة, قيم, القيم };
        }
        const التبويب = احصل(الرموز).القيمة.length;
        التالي(الرموز);
        القيم.push(محلل_الجملة());
        while (true) {
            while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
            if (!تحقق(الرموز, "مسافة") || احصل(الرموز).القيمة.length < التبويب)
                break;
            التالي(الرموز);
            القيم.push(محلل_الجملة());
        }

        return { نوع: "لاجل", المتغير, الحد, القيم };
    }
    function محلل_بينما() {
        تطابق(الرموز, "كلمة", "بينما");
        // تخطي المسافات والاسطر الفارغة
        while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
            التالي(الرموز);

        // الشروط
        let الشروط = [];
        while (true) {
            const القيمة = محلل_التعبير();
            الشروط.push(القيمة);
            if (تطابق(الرموز, "رمز_حسابي", ":")) break;
        }

        // ما بداخل بينما
        const القيم = [];
        while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
        if (!تحقق(الرموز, "مسافة")) {
            return { نوع: "بينما", الشروط, القيم };
        }
        const التبويب = احصل(الرموز).القيمة.length;
        التالي(الرموز);
        القيم.push(محلل_الجملة());
        while (true) {
            while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
            if (!تحقق(الرموز, "مسافة") || احصل(الرموز).القيمة.length < التبويب)
                break;
            التالي(الرموز);
            القيم.push(محلل_الجملة());
        }

        return { نوع: "بينما", الشروط, القيم };
    }

    function محلل_دالة() {
        تطابق(الرموز, "كلمة", "دالة");

        const الاسم = تطابق(الرموز, "معرف");
        if (!الاسم) {
            const error = new Error(`لا يوجد اسم للدالة`);
            error.line = `في السطر ` + احصل(الرموز).السطر;
            throw error;
        }

        تطابق(الرموز, "اقواس", "(");
        const المعاملات = [];
        while (!تحقق(الرموز, "اقواس", ")")) {
            const معرف = تطابق(الرموز, "معرف");
            if (معرف) المعاملات.push(معرف.القيمة);
            if (تحقق(الرموز, "فاصلة")) التالي(الرموز);
        }
        تطابق(الرموز, "اقواس", ")");

        if (!تطابق(الرموز, "رمز_حسابي", ":")) {
            console.error(`توقعت ":" بعد تعريف الدالة`);
        }

        const القيم = [];
        while (
            المؤشر < رموز.length &&
            !تحقق(الرموز, "كلمة", "دالة") &&
            !تحقق(الرموز, "كلمة", "نهاية")
        ) {
            if (تحقق(الرموز, "سطر_جديد")) {
                التالي(الرموز);
                continue;
            }
            القيم.push(محلل_الجملة());
        }

        return {
            نوع: "دالة",
            اسم: الاسم.القيمة,
            معاملات: المعاملات,
            القيم: القيم,
        };
    }
    function محلل_اذا() {
        تطابق(الرموز, "كلمة", "اذا") || تطابق(الرموز, "كلمة", "إذا");
        // تخطي المسافات والأسطر الفارغة
        while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
            التالي(الرموز);

        // الشروط
        let الشروط = [];
        while (true) {
            const القيمة = محلل_التعبير();
            الشروط.push(القيمة);
            if (تطابق(الرموز, "رمز_حسابي", ":")) break;
        }

        // القيم if
        const القيم = [];
        while (
            المؤشر < الرموز.length &&
            !تحقق(الرموز, "كلمة", "والا") &&
            !تحقق(الرموز, "كلمة", "اذا")
        ) {
            while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
            if (تحقق(الرموز, "مسافة")) {
                التالي(الرموز);
                القيم.push(محلل_الجملة());
            } else {
                break;
            }
        }

        // القيم اواذا (اختياري)
        let اواذا_القيم = [];
        let شروط_اواذا = [];
        if (تطابق(الرموز, "كلمة", "اواذا") || تحقق(الرموز, "كلمة", "اوإذا")) {
            // الشروط
            while (true) {
                const القيمة = محلل_التعبير();
                شروط_اواذا.push(القيمة);
                if (تطابق(الرموز, "رمز_حسابي", ":")) break;
            }
            تطابق(الرموز, "رمز_حسابي", ":");
            while (المؤشر < الرموز.length && !تحقق(الرموز, "كلمة", "اذا")) {
                while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
                if (تحقق(الرموز, "مسافة")) {
                    التالي(الرموز);
                    اواذا_القيم.push(محلل_الجملة());
                } else {
                    break;
                }
            }
        }

        // القيم والا (اختياري)
        let والا_القيم = [];
        if (تطابق(الرموز, "كلمة", "والا") || تحقق(الرموز, "كلمة", "وإلا")) {
            تطابق(الرموز, "رمز_حسابي", ":");
            while (المؤشر < الرموز.length && !تحقق(الرموز, "كلمة", "اذا")) {
                while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
                if (تحقق(الرموز, "مسافة")) {
                    التالي(الرموز);
                    والا_القيم.push(محلل_الجملة());
                } else {
                    break;
                }
            }
        }

        return {
            نوع: "اذا",
            الشروط,
            القيم,
            اواذا_القيم,
            شروط_اواذا,
            والا: والا_القيم,
        };
    }

    // ===== الواجه
    function محلل_الواجه(الكلمة) {
        تطابق(الرموز, "كلمة", الكلمة);
        تطابق(الرموز, "اقواس", "(");
        const قيم = [];
        // تخطي المسافات والاسطر الفارغة
        while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
            التالي(الرموز);

        while (true) {
            // اضف القيمة
            const قيمة = محلل_التعبير();
            قيم.push({ القيمة: قيمة });

            // تخطي المسافات والاسطر الفارغة
            while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
                التالي(الرموز);

            // اذا لا يوجد فاصلة توقف
            if (تحقق(الرموز, "فاصلة")) التالي(الرموز);
            else break;
        }

        تطابق(الرموز, "اقواس", ")");
        return { نوع: الكلمة, قيم };
    }
    function محلل_الواجه_داخلي(الكلمة) {
        تطابق(الرموز, "كلمة", الكلمة);

        // تخطي المسافات والأسطر الجديدة
        while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
            التالي(الرموز);

        تطابق(الرموز, "اقواس", "(");
        const قيم = [];
        while (!تحقق(الرموز, "اقواس", ")")) {
            const قيمة = محلل_التعبير();
            قيم.push({ القيمة: قيمة });

            while (تحقق(الرموز, "مسافة") || تحقق(الرموز, "سطر_جديد"))
                التالي(الرموز);

            if (تحقق(الرموز, "فاصلة")) التالي(الرموز);
            else break;
        }
        تطابق(الرموز, "اقواس", ")");
        تطابق(الرموز, "رمز_حسابي", ":");

        const اوامر = [];
        while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
        if (!تحقق(الرموز, "مسافة")) {
            return { نوع: الكلمة, قيم, اوامر };
        }
        const التبويب = احصل(الرموز).القيمة.length;
        التالي(الرموز);
        اوامر.push(محلل_الجملة());
        while (true) {
            while (تحقق(الرموز, "سطر_جديد")) التالي(الرموز);
            if (!تحقق(الرموز, "مسافة") || احصل(الرموز).القيمة.length < التبويب)
                break;
            التالي(الرموز);
            اوامر.push(محلل_الجملة());
        }

        return { نوع: الكلمة, قيم, اوامر };
    }

    function ابدأ() {
        const جمل = [];
        while (المؤشر < الرموز.length) {
            if (تحقق(الرموز, "سطر_جديد")) {
                التالي(الرموز);
                continue;
            }
            جمل.push(محلل_الجملة());
        }
        return { نوع: "برنامج", جمل };
    }
    return ابدأ();
}
